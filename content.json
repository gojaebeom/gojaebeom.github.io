{"pages":[{"title":"About Jaebeom&#39;s Blog","text":"Intro.안녕하세요.","link":"/about/index.html"}],"posts":[{"title":"github Blog 만들기 - github 페이지 생성","text":"github blog를 만든 계기요즈음 github에 프로젝트를 올리면서 동시에 글을 쓰는 데요. 아무래도 코딩과 동시에 설명을 적으니 주석 때문에 글도 지저분해 보이고 관리가 필요한 것 같더라고요. 그래서 시작한 github에서 제공하는 github pages 블로그 프레임워크 hexo를 이용하여 현재 블로그를 만들었습니다. github pages란?먼저 git과 github에 대한 어느 정도의 지식이 필요합니다. github pages는 github에 저장소의 내용을 (정적인) 웹페이지로 만들어 주는 서비스입니다. 그리고 무료라는 게 큰 장점이지요. github pages : https://pages.github.com/ hexo란?github pages에서 저장소를 웹페이지로써 호스팅할 수 있게 해준다면, 이것을 쉽게 관리하고 사용하게 해주는 프레임워크들이 있습니다. 정적 사이트 생성기(Static site generator)라고도 하며 대중적으로 유명한 hexo, jekyll, hugo 등이 있습니다. 이중의 뭐가 더 좋다~ 라는 건 저도 잘 모르겠습니다. 각 프레임워크들을 만든 프로그래밍언어들이 다른데 hexo는 nodejs, jekyll는 ruby, hugo는 go 언어로 만들어졌다고 합니다. 저는 nodejs를 접해본 경험이 있기 때문에 hexo가 가장 친근하게 다가왔습니다. hexo : https://hexo.io/ 물론 T스토리나 다음 블로거 등등을 사용해도 되지만 github로 블로그에 포스트를 게시하면서 동시에 github의 잔디까지 깔 수 있겠다 싶은게 가장 컷구요.(하지만 블로그에 글을 올리고 github에 업로드하여도 잔디가 채워지지 않았습니다. 이거 어째서입니까..? ) github page 생성본격적으로 github page를 만들어봅시다. 생각보다 엄청 간단한데요, 먼저 github계정이 있다는 전제 하에 github 메인페이지의 우측 상단에 추가버튼 을 누르고 new repository를 눌러주세요. 그리고 repository를 만드는데 다음과 같이 repository명을 example.github.io 를 만들어주세요. example 부분에는 꼭 본인의 아이디명을 적어주셔야 합니다! 마지막으로 하단의 Initialize this repository with a README 박스를 채크해주시고 create repository를 클릭해주세요. Initialize this repository with a README 을 채크할 경우 github에 바로 README 파일과함께 repository를 생성할 수 있습니다. 위의 이미지처럼 {사용자명}/github.io 의 이름으로 repository가 생성되었다면 성공입니다. github page는 생성이 되었지만 아직 기본적인 설정이 하나 더 남았습니다. https://{사용자명}/github.io url로 주소를 치게되면 처음으로 보이는 index페이지를 하나 생성해봅시다. 생성된 repository의 클론주소를 복사해줍니다. 본인의 로컬의 내려 받고싶은 폴더에 cmd나 터미널, git bash 등을 이용하여 ‘git clone {복사한 주소}’ 해줍니다. 로컬에 생성된 폴더에 들어가 index.html 파일을 만들고 hello world 등 예시 문구등을 적어주세요. index.html이 만들어진 git 로컬저장소를 다시 github에 push 해줍니다. 브라우저에서 https://{사용자명}/github.io url 주소를 입력하면 사용자가 정의한 문구가 보이는 페이지가 뜨는 것을 확인 할 수 있습니다. (바로 생성되지 않을 수 도 있어요. 저의 경우엔 3분가량 소요되었던 것 같습니다.) 여기까지 github page를 생성하는 방법을 알아보았습니다. 생각만큼 친절한 글은 아닌것 같아요. 중간중간 빠진 내용도 많아보이죠. 아마 이 글을 보러 오시는 분들이라면 웹에 관한 선행학습이 어느정도 되어있을 것 이라 괜찮다고 생각 하였습니다. 다음 글은 이어서 hexo 설치 및 배포방법에 대하여 포스팅하겠습니다.","link":"/2020/04/17/hexo/hexo01/"},{"title":"github Blog 만들기 - hexo 설치 및 배포","text":"Hexo 설치저번 글에서 github page를 생성하는 것 까지 해보았습니다. 이어서 Hexo를 설치해 보겠습니다. 다시 Hexo에 대하여 간단히 말하자면 NodeJS 기반으로 만들어진 정적사이트 생성기로써 github page를 좀더 쉽게 관리 및 아름다운 테마를 사용할 수 있게 해줍니다. 먼저 hexo를 설치하기 위해선 nodeJS가 설치되어 있어야 합니다. Node.JS 공식홈페이지 주소 nodejs를 로컬에 설치하면 자동으로 npm도 함께 설치가 되는데 npm은 Node Packaged Manager의 약자로, 많은 사람들이 자바스크립트 패키지들을 만들어 공유하고 그런 오픈소스라이브러리들 쉽게 사용할 수 있게 해주는 프로그램입니다. 우리는 npm을 통해 Hexo를 설치해보겠습니다. 1. hexo 클라이언트 설치 : cmd창이나 터미널을 열고 다음을 입력합니다. 123$ npm install hexo-cli -g//install대신 i를 적어도 됩니다.//-g는 global의 약자로 사용자의 로컬에 전역적으로 설치한다는 뜻 입니다. 2. hexo 폴더 생성 : 핵소 클라이언트를 설치하였다면 이제 hexo 명령어를 사용할 수 있습니다. hexo를 통해 hexo 폴더를 생성해봅시다. 123$ hexo init 폴더명 //폴더명 부분에 원하는 폴더명을 입력하세요$ cd 폴더명 //cd 는 change directory의 약자로 해당 폴더로 이동하게 해줍니다.$ npm install // 폴더내부에 package.json 파일의 내용을 읽어 필요한 모듈들을 인스톨하는 과정입니다. error없이 완료되면 성공입니다! 3. config.yml 수정 : 정적 사이트 생성기 프레임워크들의 공통적인 특징으로 사용자가 쉽게 사이트의 정보를 수정할 수 있는 config.yml이 존재합니다. 해당 파일을 코드에디터등을 활용하여 열어주세요. 123456789# Site 수정 : 제일 상단에 있습니다.# 예시로 적어놓은 것 이니 본인한테맞게 적어주세요title: Hexo # 사이트 제목subtitle: 'hexo 블로그' # 사이트 부제description: 'hexo로 만든 블로그 입니다' # 사이트 설명keywords: hexo, github, github pages, git # 사이트 검색 키워드author: JaeBeom Go # 저자language: ko # 사용 언어timezone: 'Asia/Seoul' # 표준시간 123456789# URL 수정 : 상단 쪽에 있습니다.# 예시로 적어놓은 것 이니 본인한테맞게 적어주세요url: http://example.github.ioroot: /permalink: :year/:month/:day/:title/permalink_defaults:pretty_urls: trailing_index: true trailing_html: true 123456# Deployment 수정 : 제일 하단에 있습니다.# 예시로 적어놓은 것 이니 본인한테맞게 적어주세요deploy: type: git repo: https://github.com/username/username.github.io.git branch: master 4. hexo 서버 실행시켜 보기 : 기본적인 셋팅은 끝났습니다. 해당 디렉토리 위치의 cmd에서 아래 명령어를 입력해주세요. 12$ hexo server//server는 줄여서 s로 사용가능합니다. 서버가 정상적으로 실행되면 http://localhost:4000에서 블로그를 볼 수 있습니다. 실행시키면 이렇게 우주스러운테마의 홈페이지가 열리면 성공입니다. 5. hexo 블로그파일 github에 배포하기방금 서버를 실행시킨것은 어디까지나 개인 컴퓨터에서만 보이는 서버입니다. 이제 github에 배포하여 다른 사람들도 볼 수 있도록 해봅시다. -정적 웹 리소스 생성하기 12$ hexo generate//줄여서 hexo g 로도 사용가능합니다. -github에 배포하기 123$ hexo deploy//줄여서 hexo -d 로도 사용가능합니다.//위의 웹 리소스 생성과 배포를 'hexo g -d' 로 동시에 할 수 있습니다. 배포시에 ERROR Deployer not found: git 라는 에러가 뜬다면 hexo-deployer-git 이라는 플러그인을 설치해주세요 1$ npm install hexo-deployer-git 설치 후 다시 ‘hexo -d’ 를 통해 github에 배포를 하면 됩니다. 그 후 브라우저에서 https://{username}.github.io 주소 입력시 우주스러운 홈페이지가 뜨면 성공입니다. 이번 글에서는 hexo 설치 및 배포하는 방법까지 알아보았습니다. 하지만 블로그 디자인이 너무 우주스러운게 맘에 들지않아요. hexo에서는 타 정적 웹사이트 프레임워크들과 같이 아름다운 테마들을 제공하는데요. 다음시간에는 테마 적용방법에 대하여 포스팅하겠습니다.","link":"/2020/04/20/hexo/hexo02/"},{"title":"github Blog 만들기 - hexo 테마 적용하기","text":"Hexo 테마 설치하기hexo에서는 수많은 테마들이 존재합니다. 본인이 원하는 테마를 찾아 다운받을 수 있습니다. 저는 그중에서도 icarus 라는 테마를 사용하였습니다. icaurs는 material 스러운 디자인으로 저의 취향에 딱 맞는 느낌이더라고요ㅎㅎ 자신이 원하는 테마를 적용할 때는 해당 사이트에서 시키는 방법대로 적용하면 됩니다. 처음 테마를 설치하는 방법은 다 비슷한데 이번 글에서는 icarus theme를 적용하는 방법으로 글을 작성하겠습니다. -테마 다운로드hexo 블로그 디렉토리 위치에서 터미널을 통해 다음 명령어를 입력 해주세요. 1$ git clone https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus 다운로드가 완료되면 hexo 블로그 폴더에 themes 폴더에 icarus 폴더가 생성된 것을 볼 수 있습니다. -테마 바꾸기처음 hexo를 실행시켰을때 보였던 블로그 테마는 landscape 라는 기본 테마인데요. 이것을 다운받은 icarus 테마로 바꿔주어야 합니다. _config.yml 파일을 열어 다음 부분을 수정해주세요. 1234# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: landscape # &lt;- 이부분을 icarus로 바꾸어주세요. -github에 hexo 블로그 재배포하기이전 글에서 다루었던 방법으로 지금까지 수정한 내용을 저장하고 다시 github에 올리면 github page가 바뀐것을 볼 수 있습니다. 다음과 같이 명령어를 입력해주세요. 1$ hexo g -d 아마 ERROR: pakage [패키지명] is not installed. 라는 에러가 몇개 뜨는 것을 볼 수 있는데요. icarus 테마에서 필요로하는 패키지들이 인스톨되지 않았다는 것 입니다. 당황하지말고 로그에 필요하다고 하는 패키지들을 다음과같이 install 해주세요. 1$ npm install [패키지명] 이 이후에 다시 hexo g -d 를 통해 github에 배포 후 사이트에 접속해보세요. icarus테마가 적용되어 보이면 성공입니다!이번 글에서는 hexo 블로그에 icarus 테마를 적용하는 방법에 대하여 알아 보았습니다. 다음 글에서는 icarus 테마의 일부분을 커스터마이징 하는 방법에 대해서 알아보겠습니다.","link":"/2020/04/20/hexo/hexo03/"},{"title":"github Blog 만들기 - icarus 테마 커스터마이징","text":"icarus 테마 살펴보기테마를 적용하고난 이후 기쁜마음에 이곳저곳 살펴보다보면 아래 사진처럼 뭐지 싶은 박스들을 볼 수 있습니다. 저도 github 사이트를 만들때 여러 블로그의 글을 보면서 도움을 받았지만, 사실 상 이 부분이 까다로웠습니다. icarus 테마를 다루는 블로거 분들은 모두 ejs 파일로 만들어진 icarus에 대하여 다루고있지만 본인이 다운받은 파일은 모두 react로 만들어져 있다는 것.. 현재 icarus 공식 github 사이트에 업로드 되어있는 파일은 react로 리팩토링되어 있는 것 같습니다. react를 조금이나마 흥미를 가지고 배운적이 있기에 긍정적인 마음으로 임하였지만 가장 큰 문제는 블로그에서 다루는 커스터마이징 파일은 ejs 또는 pug등의 파일들로 제공되어있는데, react 로 수정된 버전은 방법이 조금 달라진 것 같습니다. 다행이도 어느정도 시간을 두고 삽질을 하니 많은 부분이 해결이 되었습니다. 테마 일부 기능 삭제 / 추가하기위의 사진의 박스들이 어느정도 짐작이 가시나요? 각자 광고, 공유, 후원, 댓글기능 등을 추가할 수 있는 카드들이라는 것 입니다. 일단 광고와 후원은 현재로서는 사용하지 않을 예정이니 기능을 꺼놓도록 하겠습니다. -구글 광고 카드 삭제hexo 블로그 폴더에 있는 config 파일이 아닌 icarus 테마 폴더에 있는 _config.yml 파일을 열어주세요. # Google AdSense unit configurations 주석을 찾아 아래 내용과 같이 수정해주세요. 12345678910# Google AdSense unit configurations# 구글 광고 카드 / 사용시 adsense 앞의 #을 제거해주세요. - # Where should the widget be placed, left sidebar or right sidebar position: left type: #adsense # AdSense client ID client_id: '' # AdSense AD unit ID slot_id: '' -후원 기능 삭제위와 같이 _config.yml 파일을 열어 # Donate plugin configurations 주석 이하 내용을 삭제 또는 주석처리 해주세요. 123456789101112131415161718192021222324252627282930 # Donate plugin configurations# https://blog.zhangruipeng.me/hexo-theme-icarus/categories/Plugins/Donation/donates: # Alipay donate button configurations - type: alipay # Alipay qrcode image URL qrcode: '' # \"Buy me a coffee\" donate button configurations - type: buymeacoffee # URL to the \"Buy me a coffee\" page url: '' # Patreon donate button configurations - type: patreon # URL to the Patreon page url: '' # Paypal donate button configurations - type: paypal # Paypal business ID or email address business: '' # Currency code currency_code: USD # Wechat donate button configurations - type: wechat # Wechat qrcode image URL qrcode: '' -ShareThis(공유) 기능 연결하기ShareThis는 방문자가 여러 sns 등에 글을 공유할 수 있게 해주는 기능을 서비스 합니다. icarus(리액트 버전)테마 에서는 sharethis를 연결하는 방법이 조금 다릅니다. sharethis 사이트를 방문하여 원하는 공유 버튼을 제출을 하고 코드를 받습니다. 12345&lt;script type='text/javascript' src='blablablabla:example_code' async='async'&gt;&lt;/script&gt; 원래는 위의 코드전체를 ejs 파일에 붙여야 하지만 저희는 저 코드에서 src의 코드부분만 복사를 해둡니다. 위의 src내용은 임시로 작성한 것입니다. 본인이 본인 사이트의 주소를 입력하고 발급을 받아야합니다! 복사한 코드를 install_url 부분에 붙여넣어 줍시다. 123456# Share plugin configurations# https://ppoffice.github.io/hexo-theme-icarus/categories/Plugins/Share/share: type: sharethis # URL to the ShareThis share plugin script install_url: '' -Disqus를 사용하여 댓글 기능 셋팅하기Disqus는 소셜 댓글 서비스 입니다. 소셜 댓글 서비스란 소셜미디어(SNS)를 활용한 댓글 시스템으로 페이스북,트위터 와 같은 SNS와 연동해서 댓글을 달 수 있게 만들어 주는 서비스입니다. 소셜 댓글 서비스를 활용하여 댓글을 달면 동시에 해당 댓글이 자신이 연동한 SNS에도 발행이 됩니다. 위의 사이트에 들어가 회원가입을하고 무료버전 서비스를 받아봅시다. 이번에도 ShareThis처럼 다른 테마들과는 다르게 태그 등은 필요하지 않고 ‘short-name’ 값만 가져오면 됩니다. short-name은 회원가입한 ShareThis 아이디에 운영중인 홈페이지 URL을 연결하면 받을 수 있습니다. 그리고 _config.yml의 다음 부분에 short-name의 값을 붙여넣어 주세요. 123456# Comment plugin configurations# https://ppoffice.github.io/hexo-theme-icarus/categories/Plugins/Comment/comment: type: disqus # Disqus shortname shortname: '' # &lt;- 이 부분에 코드 넣기 여기까지 잘 진행이 되었다면 먼저 hexo server 로 확인을 해주시고 적용이 된 것을 확인하였다면 github에 배포해주시면 됩니다. 남은 프로필을 수정하거나 카드의 배치같은 부분도 _config.yml에서 할 수 있으니 자신만의 느낌대로 적용하시면 될 것 같습니다. 다음 글은 hexo 프레임워크에서 post 하는 방법등을 알아보겠습니다.","link":"/2020/04/20/hexo/hexo04/"},{"title":"github Blog 만들기 - 글 작성하기","text":"MarkDown이란?github page에서 글을 작성할때는 MarkDown 문법을 사용하여 글을 작성합니다. 마크다운은 일반 텍스트 문서의 양식을 편집하는 문법이에요. README 파일이나 온라인 문서, 혹은 일반 텍스트 편집기로 문서 양식을 편집할 때 쓰입니다. 마크다운을 이용해 작성된 문서는 쉽게 HTML 등 다른 문서형태로 변환이 가능합니다. 마크다운 문법은 구글을 통해 검색하면, 쉽게 찾아볼 수 있습니다. 간단한 문법이니 사용하기 그리 어렵지 않습니다. 새로운 글 작성우리가 hexo 프레임워크를 이용하여 포스트를 작성한다면, hexo의 명령어로 쉽게 포스트를 생성할 수 있습니다. 1$ hexo new [레이아웃명] [새 포스트 명] 을 통해 파일을 만들 수 있는데요. 여기서 레이아웃명에 post를 쓰면 되지만, 따로 명시하지않아도 default 값이 post로 되어 있어 괜찮습니다. 임시저장 글 작성만약 바로 발행되지 않는 글을 작성하고 싶다면 레이아웃명에 draft를 적어주세요. 1234$ hexo new draft [새 포스트명]// 이후 발행시에는$ hexo publish [포스트명]// 으로 발행할 수 있습니다. 위의 방법은 hexo에서 제공하는 명령어를 사용하여 만드는 방법입니다. 위와 같은 방법으로 파일을 만들었다면 hexo 폴더의 source 폴더에 _posts 폴더 내부에 파일들이 생성되어 있는 것을 알 수 있습니다. 그렇다면 저희가 직접 생성하는 것도 가능하겠네요! _posts 폴더 내부에 원하는 파일명.md 형식으로 파일을 만들어도 똑같이 적용이 됩니다. 다만 명령어로 생성시 hexo에서 사용하는 기본 구조가 잡혀있는데요. 12345---title: hellodate: 2020-04-21 09:06:30tags:--- 직접 생성시에는 상단에 저런 틀을 넣어주셔야합니다. tag 생성하기위의 문법은 마크다운에서 제공하는 것이 아닌 hexo의 템플릿 양식입니다. 글의 제목, 날짜, 태그를 적어줄 수 있게 되어있네요. title과 date는 예시가 있으니 tag를 만드는 방법을 알아봅시다. 12345tags:- example1- example2- example3// 이런식으로 다수의 태그를 지정할 수 있습니다. category 만들기위의 양식에는 입력이 안되어있지만, 저 속성들 뿐만아니라 다른 다양한 속성들을 사용할 수 있습니다. 저희가 작성한 글의 카테고리를 분류하고싶다면 위의 양식에 속성으로 category: 를 만들어주세요. 그리고 다음과 같이 적어주시면 됩니다. 12345category:- 웹 개발//위의 카테고리에서 한번 더 분류하고 싶다면- java //밑에 두번째 분류 속성을 만들어주시면 됩니다. 이렇게 작성하면 웹 개발/ java 이런식으로 만들 수 있습니다. 썸네일 이미지 등록마찬가지로 thumbnail이라는 속성을 추가하여 썸네일 이미지를 등록할 수 있습니다. 1thumbnail: //이부분에 사용할 이미지의 주소를 입력해 주세요. more, excerpt인덱스 페이지에 어느부분까지 표시할 건지에 대한 세팅을 할 수 있습니다. 본문에 아래 주석을 이용하면 됩니다. 123본문이 이렇게 있을 때 여기까지만 인덱스 페이지에 나타납니다.&lt;!-- more --&gt;여기서부턴 인덱스에 안나옵니다. 123여기까지의 내용은 인덱스 페이지에만 나타납니다.&lt;!-- excerpt --&gt;여기서부턴 본문 시작입니다. 지금까지 post를 작성하는 방법에 대하여 알아보았습니다. 물론 이것 말고도 다른 여러가지 기술들이 있지만, 저도 아직 사용한지 얼마 안되어 이것저것 만져보고 이후에 더 추가하도록 하겠습니다. 감사합니다.","link":"/2020/04/21/hexo/hexo05/"},{"title":"JAVA 시작하기","text":"자바(JAVA)란 무엇인가?오늘부터 자바에 대해서 포스팅을 할 예정인데요. 시작하기 앞서 자바가 무엇인지 간단히 알아보고 진행하도록 하겠습니다. 자바는 1991년 썬 마이크로시스템즈(Sun Microsystems)사에서 제임스 고슬링(James Gosling)이 고안하였고 그때 당시엔 오크(Oak), 또는 그린(Green) 이라고 불렸습니다. 오크는 최조에 가전제품에 쓰일 목적으로 개발이 되었지만 인터넷과 웹의 출현으로 오크의 초점은 가전제춤에서 인터넷으로 옮겨지게 되었다고 합니다. 이후 1995년 이름을 자바로 변경하게 되었습니다. 자바는 인기플랫폼에 무료 런타임을 제공하였고, 대부분의 브라우저들은 곧 자바 애플릿(Java Applet)을 웹페이지 안에서 실행할 수 있었으며 자바의 인기는 급상승 하였습니다. 2009년 썬 마이크로시스템즈는 오라클에 인수 합병되었고 자바에 대한 권리 및 유지보수 또한 오라클로 넘어가게 되었습니다. 자바의 특징에 대해서는 다음 글에서 정리하여 올리도록 하겠습니다.","link":"/2020/04/21/java/java01/"},{"title":"Java - 변수","text":"변수란?변수란 데이터의 저장과 참조를 위해 ‘할당된 메모리 공간’ 에 붙인 이름을 말합니다. 변수의 이해와 활용12345678int num1; //변수 num1 의 선언num1 = 10; //변수 num1에 10을 저장int num2 = 10; //변수 num2 선언과 동시에 20으로 초기화int num3 = num1 + num2; // 두 변수 값을 대상으로 덧셈한 값을 num3에 저장System.out.println(num1 + \"+\" + num2 + \"=\" + num3); 자바에서는 값의 대입의 의미로 = 기호가 사용됩니다. 기호 = 를 가리켜 대입 연산자 라고 합니다. 앞서 int 라는 키워드를 사용하여 변수를 만들었는데, 이러한 키워드를 가리켜 자료형 이라고 합니다. 그리고 자바에서는 다양한 자료형을 제공합니다. 자료형 데이터 크기 표현 가능 범위 boolean 참과 거짓 1바이트 true, false char 문자 2바이트 유니코드 문자 byte 정수 1바이트 -128~127 short 정수 2바이트 -32,768~32,767 int 정수 4바이트 -2,147,483,648 ~ 2,147,483,647 long 정수 8바이트 -9,223,372,036,854,775,808 ~ 엄청크다.. float 실수 4바이트 소숫점 자리 표현가능이라고 해두겠다 double 실수 8바이트 … 다수의 변수 한번에 선언하기1234567891011double num4, num5; //이와 같이 자료형이 같은 변수를 , 로 구분하여 동시 선언 가능하다.double result;num4 = 1.0000001;num5 = 2.0000001;//실수의 덧셈 예제result = num4 + num5;System.out.println(result);//출력을 하게되면 예상했던 숫자 3.0000002 가 아닌 3.0000001999999997 같은 수가 나온다//이유는 기본적으로 컴퓨터의 실수 표현에는 오차가 존재한다. 따라서 위와 같이 실수 1.000001을 저장 할 경우//변수에 저장되는 값은 이에 가까운 값일 뿐 정확히 1.000001은 아니기때문이다. 기본자료형 - 정수12345678short num1 = 11;short num2 = 22;short result = num1 + num2;//에러가 나는 코드//int result = num1 + num2; // 에러가 나지않는 코드System.out.println(result); 위의 예제를 보면 11, 22 의 정수는 2바이트 정수로 표현할 수 있으므로 short형 변수를 사용하는것이 옳다고 생각됩니다.논리적으로 보면 문제가 없지만 자바의 관점에서 보면 문제가 있는 코드 입니다. 자바는 정수형 연산을 int형으로 진행합니다. 따라서 byte나 short형 변수에 저장된 값을 대상으로 덧셈과 같은 연산을 진행하면 이른 먼저 int형 값으로 변경해 버립니다. 즉 위의 예제는 덧셈 연산 이전에 다음 과정을 거치게 됩니다. 변수 num1 과 num2 에 저장된 값을 int형으로 변환한다. 그렇기 때문에 위의 short result 변수에 두 변수의 합을 할당하려하니 ‘short result = num1 + num2;’ 부분에서 에러가 납니다. 주석으로 처리된 int result = num1 + num2 로 구문 작성시 잘 동작하는 것을 볼 수 있습니다. 기본자료형 - 문자1234567891011121314public static void main(String[] args) { char ch1 = '헐'; char ch2 = '확'; char ch3 = 54736; //문자 '헐'의 유니코드 값 char ch4 = 54869; //문자 '확'의 유니코드 값 System.out.println(ch1); System.out.println(ch2); System.out.println(ch3); System.out.println(ch4); /** * 컴파일 과정에서 위의 문자(헐, 확)들은 유니코드 값으로 치환된다. 즉 변수에 실제 저장되는 값은 유니코드 값이다. */} 문자의 표현에 대한 약속을 가리켜 ‘문자셋(Character Set)’ 이라고 합니다. 이러한 문자 셋의 설계는 지역 및 국가별로 각각 이루어져 그 수가 다양합니다. 때문에 데이터를 주고받거나 여러 국가의 언어를 동시에 표현하는 상황에서는 문제가 되는데요. 그래서 모든 나라의 문자를 수용하여 전 세계적으로 사용할 수 있는 문자 셋을 설계하게 되었는데, 이를 가리켜 ‘유니코드(Unicode)’라고합니다 유니코드는 문자 하나를 2바이트로 표현하는 문자 체계입니다. 2바이트로 표현할 수 있는 데이터의 수는 2의 16승 개이므로 총 6만 개 이상의 문자 표현이 가능합니다. (유니코드의 정보는 www.unicode.org 에서 확인할 수 있습니다.) 자바의 char는 문자의 저장을 위한 자료형입니다. 그리고 자바는 유니코드를 기반으로 문자를 처리합니다. 따라서 다음과 같이 char형 변수 하나에 한글 문자 하나를 저장하는 것이 가능해요. 그리고 위의 예제에서보이듯이 문자는 작은따옴표로 감싸서 표현해야 합니다. 기본자료형 - 논리boolean형 변수를 사용하여 값의 참과 거짓을 판별하는 예제 입니다. 123456789101112131415public static void main(String[] args) { boolean b1 = true; boolean b2 = false; System.out.println(b1); System.out.println(b2); int num1 = 10; int num2 = 20; System.out.println(num1 &lt; num2); System.out.println(num1 &lt; num2 &amp;&amp; b1); System.out.println(num1 &lt; num2 &amp;&amp; b2);} 식별자 규칙자바는 대소문자를 구분합니다. 따라서 Num1 과 num1은 서로 다른 이름으로 인식됩니다. 때문에 자료형 int를 대신하여 INT를 사용할 수 없고 변수의 이름을 짓는데 다음과 같은 제약사항이 존재합니다. 식별자 규칙 첫 문자가 문자나 ‘_’, ‘$’의 특수문자로 시작되어야 한다. 숫자로 시작할 수 없다. 첫 문자가 아니라면, 문자나 ‘_’, ‘$’의 특수문자 그리고 숫자로 구성될 수 있다. 자바의 예약어는 식별자로 사용할 수 없다. 식별자 길이는 제한이 없고 공백은 포함할 수 없다. 일반적 관례 클래스 이름은 대문자의 명사로 시작 메서드 이름은 소문자의 동사 변수는 소문자의 명사 상수는 대문자의 명사","link":"/2020/04/21/java/java02/"}],"tags":[{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"nodejs","slug":"nodejs","link":"/tags/nodejs/"},{"name":"git","slug":"git","link":"/tags/git/"},{"name":"git page","slug":"git-page","link":"/tags/git-page/"},{"name":"github","slug":"github","link":"/tags/github/"},{"name":"hexo icarus theme","slug":"hexo-icarus-theme","link":"/tags/hexo-icarus-theme/"},{"name":"hexo post","slug":"hexo-post","link":"/tags/hexo-post/"},{"name":"markdown","slug":"markdown","link":"/tags/markdown/"},{"name":"java","slug":"java","link":"/tags/java/"},{"name":"오라클","slug":"오라클","link":"/tags/%EC%98%A4%EB%9D%BC%ED%81%B4/"},{"name":"oracle","slug":"oracle","link":"/tags/oracle/"},{"name":"oak","slug":"oak","link":"/tags/oak/"},{"name":"green","slug":"green","link":"/tags/green/"},{"name":"java 변수","slug":"java-변수","link":"/tags/java-%EB%B3%80%EC%88%98/"},{"name":"식별자","slug":"식별자","link":"/tags/%EC%8B%9D%EB%B3%84%EC%9E%90/"},{"name":"기본 자료형","slug":"기본-자료형","link":"/tags/%EA%B8%B0%EB%B3%B8-%EC%9E%90%EB%A3%8C%ED%98%95/"}],"categories":[{"name":"웹 개발","slug":"웹-개발","link":"/categories/%EC%9B%B9-%EA%B0%9C%EB%B0%9C/"},{"name":"github page &amp; hexo","slug":"웹-개발/github-page-hexo","link":"/categories/%EC%9B%B9-%EA%B0%9C%EB%B0%9C/github-page-hexo/"},{"name":"java","slug":"웹-개발/java","link":"/categories/%EC%9B%B9-%EA%B0%9C%EB%B0%9C/java/"}]}