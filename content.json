{"pages":[{"title":"안녕하세요!","text":"추후 작성 예정","link":"/about/index.html"}],"posts":[{"title":"github Blog 만들기 - hexo 설치 및 배포","text":"Hexo 설치저번 글에서 github page를 생성하는 것 까지 해보았습니다. 이어서 Hexo를 설치해 보겠습니다. 다시 Hexo에 대하여 간단히 말하자면 NodeJS 기반으로 만들어진 정적사이트 생성기로써 github page를 좀더 쉽게 관리 및 아름다운 테마를 사용할 수 있게 해줍니다. 먼저 hexo를 설치하기 위해선 nodeJS가 설치되어 있어야 합니다. Node.JS 공식홈페이지 주소 nodejs를 로컬에 설치하면 자동으로 npm도 함께 설치가 되는데 npm은 Node Packaged Manager의 약자로, 많은 사람들이 자바스크립트 패키지들을 만들어 공유하고 그런 오픈소스라이브러리들 쉽게 사용할 수 있게 해주는 프로그램입니다. 우리는 npm을 통해 Hexo를 설치해보겠습니다. 1. hexo 클라이언트 설치 : cmd창이나 터미널을 열고 다음을 입력합니다. 123$ npm install hexo-cli -g//install대신 i를 적어도 됩니다.//-g는 global의 약자로 사용자의 로컬에 전역적으로 설치한다는 뜻 입니다. 2. hexo 폴더 생성 : 핵소 클라이언트를 설치하였다면 이제 hexo 명령어를 사용할 수 있습니다. hexo를 통해 hexo 폴더를 생성해봅시다. 123$ hexo init 폴더명 //폴더명 부분에 원하는 폴더명을 입력하세요$ cd 폴더명 //cd 는 change directory의 약자로 해당 폴더로 이동하게 해줍니다.$ npm install // 폴더내부에 package.json 파일의 내용을 읽어 필요한 모듈들을 인스톨하는 과정입니다. error없이 완료되면 성공입니다! 3. config.yml 수정 : 정적 사이트 생성기 프레임워크들의 공통적인 특징으로 사용자가 쉽게 사이트의 정보를 수정할 수 있는 config.yml이 존재합니다. 해당 파일을 코드에디터등을 활용하여 열어주세요. 123456789# Site 수정 : 제일 상단에 있습니다.# 예시로 적어놓은 것 이니 본인한테맞게 적어주세요title: Hexo # 사이트 제목subtitle: 'hexo 블로그' # 사이트 부제description: 'hexo로 만든 블로그 입니다' # 사이트 설명keywords: hexo, github, github pages, git # 사이트 검색 키워드author: JaeBeom Go # 저자language: ko # 사용 언어timezone: 'Asia/Seoul' # 표준시간 123456789# URL 수정 : 상단 쪽에 있습니다.# 예시로 적어놓은 것 이니 본인한테맞게 적어주세요url: http://example.github.ioroot: /permalink: :year/:month/:day/:title/permalink_defaults:pretty_urls: trailing_index: true trailing_html: true 123456# Deployment 수정 : 제일 하단에 있습니다.# 예시로 적어놓은 것 이니 본인한테맞게 적어주세요deploy: type: git repo: https://github.com/username/username.github.io.git branch: master 4. hexo 서버 실행시켜 보기 : 기본적인 셋팅은 끝났습니다. 해당 디렉토리 위치의 cmd에서 아래 명령어를 입력해주세요. 12$ hexo server//server는 줄여서 s로 사용가능합니다. 서버가 정상적으로 실행되면 http://localhost:4000에서 블로그를 볼 수 있습니다. 실행시키면 이렇게 우주스러운테마의 홈페이지가 열리면 성공입니다. 5. hexo 블로그파일 github에 배포하기방금 서버를 실행시킨것은 어디까지나 개인 컴퓨터에서만 보이는 서버입니다. 이제 github에 배포하여 다른 사람들도 볼 수 있도록 해봅시다. -정적 웹 리소스 생성하기 12$ hexo generate//줄여서 hexo g 로도 사용가능합니다. -github에 배포하기 123$ hexo deploy//줄여서 hexo -d 로도 사용가능합니다.//위의 웹 리소스 생성과 배포를 'hexo g -d' 로 동시에 할 수 있습니다. 배포시에 ERROR Deployer not found: git 라는 에러가 뜬다면 hexo-deployer-git 이라는 플러그인을 설치해주세요 1$ npm install hexo-deployer-git 설치 후 다시 ‘hexo -d’ 를 통해 github에 배포를 하면 됩니다. 그 후 브라우저에서 https://{username}.github.io 주소 입력시 우주스러운 홈페이지가 뜨면 성공입니다. 이번 글에서는 hexo 설치 및 배포하는 방법까지 알아보았습니다. 하지만 블로그 디자인이 너무 우주스러운게 맘에 들지않아요. hexo에서는 타 정적 웹사이트 프레임워크들과 같이 아름다운 테마들을 제공하는데요. 다음시간에는 테마 적용방법에 대하여 포스팅하겠습니다.","link":"/2020/04/20/hexo/hexo02/"},{"title":"github Blog 만들기 - 글 작성하기","text":"MarkDown이란?github page에서 글을 작성할때는 MarkDown 문법을 사용하여 글을 작성합니다. 마크다운은 일반 텍스트 문서의 양식을 편집하는 문법이에요. README 파일이나 온라인 문서, 혹은 일반 텍스트 편집기로 문서 양식을 편집할 때 쓰입니다. 마크다운을 이용해 작성된 문서는 쉽게 HTML 등 다른 문서형태로 변환이 가능합니다. 마크다운 문법은 구글을 통해 검색하면, 쉽게 찾아볼 수 있습니다. 간단한 문법이니 사용하기 그리 어렵지 않습니다. 새로운 글 작성우리가 hexo 프레임워크를 이용하여 포스트를 작성한다면, hexo의 명령어로 쉽게 포스트를 생성할 수 있습니다. 1$ hexo new [레이아웃명] [새 포스트 명] 을 통해 파일을 만들 수 있는데요. 여기서 레이아웃명에 post를 쓰면 되지만, 따로 명시하지않아도 default 값이 post로 되어 있어 괜찮습니다. 임시저장 글 작성만약 바로 발행되지 않는 글을 작성하고 싶다면 레이아웃명에 draft를 적어주세요. 1234$ hexo new draft [새 포스트명]// 이후 발행시에는$ hexo publish [포스트명]// 으로 발행할 수 있습니다. 위의 방법은 hexo에서 제공하는 명령어를 사용하여 만드는 방법입니다. 위와 같은 방법으로 파일을 만들었다면 hexo 폴더의 source 폴더에 _posts 폴더 내부에 파일들이 생성되어 있는 것을 알 수 있습니다. 그렇다면 저희가 직접 생성하는 것도 가능하겠네요! _posts 폴더 내부에 원하는 파일명.md 형식으로 파일을 만들어도 똑같이 적용이 됩니다. 다만 명령어로 생성시 hexo에서 사용하는 기본 구조가 잡혀있는데요. 12345---title: hellodate: 2020-04-21 09:06:30tags:--- 직접 생성시에는 상단에 저런 틀을 넣어주셔야합니다. tag 생성하기위의 문법은 마크다운에서 제공하는 것이 아닌 hexo의 템플릿 양식입니다. 글의 제목, 날짜, 태그를 적어줄 수 있게 되어있네요. title과 date는 예시가 있으니 tag를 만드는 방법을 알아봅시다. 12345tags:- example1- example2- example3// 이런식으로 다수의 태그를 지정할 수 있습니다. category 만들기위의 양식에는 입력이 안되어있지만, 저 속성들 뿐만아니라 다른 다양한 속성들을 사용할 수 있습니다. 저희가 작성한 글의 카테고리를 분류하고싶다면 위의 양식에 속성으로 category: 를 만들어주세요. 그리고 다음과 같이 적어주시면 됩니다. 12345category:- 웹 개발//위의 카테고리에서 한번 더 분류하고 싶다면- java //밑에 두번째 분류 속성을 만들어주시면 됩니다. 이렇게 작성하면 웹 개발/ java 이런식으로 만들 수 있습니다. 썸네일 이미지 등록마찬가지로 thumbnail이라는 속성을 추가하여 썸네일 이미지를 등록할 수 있습니다. 1thumbnail: //이부분에 사용할 이미지의 주소를 입력해 주세요. more, excerpt인덱스 페이지에 어느부분까지 표시할 건지에 대한 세팅을 할 수 있습니다. 본문에 아래 주석을 이용하면 됩니다. 123본문이 이렇게 있을 때 여기까지만 인덱스 페이지에 나타납니다.&lt;!-- more --&gt;여기서부턴 인덱스에 안나옵니다. 123여기까지의 내용은 인덱스 페이지에만 나타납니다.&lt;!-- excerpt --&gt;여기서부턴 본문 시작입니다. 지금까지 post를 작성하는 방법에 대하여 알아보았습니다. 물론 이것 말고도 다른 여러가지 기술들이 있지만, 저도 아직 사용한지 얼마 안되어 이것저것 만져보고 이후에 더 추가하도록 하겠습니다. 감사합니다.","link":"/2020/04/21/hexo/hexo05/"},{"title":"github Blog 만들기 - github 페이지 생성","text":"github blog를 만든 계기요즈음 github에 프로젝트를 올리면서 동시에 글을 쓰는 데요. 아무래도 코딩과 동시에 설명을 적으니 주석 때문에 글도 지저분해 보이고 관리가 필요한 것 같더라고요. 그래서 시작한 github에서 제공하는 github pages 블로그 프레임워크 hexo를 이용하여 현재 블로그를 만들었습니다. github pages란?먼저 git과 github에 대한 어느 정도의 지식이 필요합니다. github pages는 github에 저장소의 내용을 (정적인) 웹페이지로 만들어 주는 서비스입니다. 그리고 무료라는 게 큰 장점이지요. github pages : https://pages.github.com/ hexo란?github pages에서 저장소를 웹페이지로써 호스팅할 수 있게 해준다면, 이것을 쉽게 관리하고 사용하게 해주는 프레임워크들이 있습니다. 정적 사이트 생성기(Static site generator)라고도 하며 대중적으로 유명한 hexo, jekyll, hugo 등이 있습니다. 이중의 뭐가 더 좋다~ 라는 건 저도 잘 모르겠습니다. 각 프레임워크들을 만든 프로그래밍언어들이 다른데 hexo는 nodejs, jekyll는 ruby, hugo는 go 언어로 만들어졌다고 합니다. 저는 nodejs를 접해본 경험이 있기 때문에 hexo가 가장 친근하게 다가왔습니다. hexo : https://hexo.io/ 물론 T스토리나 다음 블로거 등등을 사용해도 되지만 github로 블로그에 포스트를 게시하면서 동시에 github의 잔디까지 깔 수 있겠다 싶은게 가장 컷구요.(하지만 블로그에 글을 올리고 github에 업로드하여도 잔디가 채워지지 않았습니다. 이거 어째서입니까..? ) github page 생성본격적으로 github page를 만들어봅시다. 생각보다 엄청 간단한데요, 먼저 github계정이 있다는 전제 하에 github 메인페이지의 우측 상단에 추가버튼 을 누르고 new repository를 눌러주세요. 그리고 repository를 만드는데 다음과 같이 repository명을 example.github.io 를 만들어주세요. example 부분에는 꼭 본인의 아이디명을 적어주셔야 합니다! 마지막으로 하단의 Initialize this repository with a README 박스를 채크해주시고 create repository를 클릭해주세요. Initialize this repository with a README 을 채크할 경우 github에 바로 README 파일과함께 repository를 생성할 수 있습니다. 위의 이미지처럼 {사용자명}/github.io 의 이름으로 repository가 생성되었다면 성공입니다. github page는 생성이 되었지만 아직 기본적인 설정이 하나 더 남았습니다. https://{사용자명}/github.io url로 주소를 치게되면 처음으로 보이는 index페이지를 하나 생성해봅시다. 생성된 repository의 클론주소를 복사해줍니다. 본인의 로컬의 내려 받고싶은 폴더에 cmd나 터미널, git bash 등을 이용하여 ‘git clone {복사한 주소}’ 해줍니다. 로컬에 생성된 폴더에 들어가 index.html 파일을 만들고 hello world 등 예시 문구등을 적어주세요. index.html이 만들어진 git 로컬저장소를 다시 github에 push 해줍니다. 브라우저에서 https://{사용자명}/github.io url 주소를 입력하면 사용자가 정의한 문구가 보이는 페이지가 뜨는 것을 확인 할 수 있습니다. (바로 생성되지 않을 수 도 있어요. 저의 경우엔 3분가량 소요되었던 것 같습니다.) 여기까지 github page를 생성하는 방법을 알아보았습니다. 생각만큼 친절한 글은 아닌것 같아요. 중간중간 빠진 내용도 많아보이죠. 아마 이 글을 보러 오시는 분들이라면 웹에 관한 선행학습이 어느정도 되어있을 것 이라 괜찮다고 생각 하였습니다. 다음 글은 이어서 hexo 설치 및 배포방법에 대하여 포스팅하겠습니다.","link":"/2020/04/17/hexo/hexo01/"},{"title":"github Blog 만들기 - hexo 테마 적용하기","text":"Hexo 테마 설치하기hexo에서는 수많은 테마들이 존재합니다. 본인이 원하는 테마를 찾아 다운받을 수 있습니다. 저는 그중에서도 icarus 라는 테마를 사용하였습니다. icaurs는 material 스러운 디자인으로 저의 취향에 딱 맞는 느낌이더라고요ㅎㅎ 자신이 원하는 테마를 적용할 때는 해당 사이트에서 시키는 방법대로 적용하면 됩니다. 처음 테마를 설치하는 방법은 다 비슷한데 이번 글에서는 icarus theme를 적용하는 방법으로 글을 작성하겠습니다. -테마 다운로드hexo 블로그 디렉토리 위치에서 터미널을 통해 다음 명령어를 입력 해주세요. 1$ git clone https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus 다운로드가 완료되면 hexo 블로그 폴더에 themes 폴더에 icarus 폴더가 생성된 것을 볼 수 있습니다. -테마 바꾸기처음 hexo를 실행시켰을때 보였던 블로그 테마는 landscape 라는 기본 테마인데요. 이것을 다운받은 icarus 테마로 바꿔주어야 합니다. _config.yml 파일을 열어 다음 부분을 수정해주세요. 1234# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: landscape # &lt;- 이부분을 icarus로 바꾸어주세요. -github에 hexo 블로그 재배포하기이전 글에서 다루었던 방법으로 지금까지 수정한 내용을 저장하고 다시 github에 올리면 github page가 바뀐것을 볼 수 있습니다. 다음과 같이 명령어를 입력해주세요. 1$ hexo g -d 아마 ERROR: pakage [패키지명] is not installed. 라는 에러가 몇개 뜨는 것을 볼 수 있는데요. icarus 테마에서 필요로하는 패키지들이 인스톨되지 않았다는 것 입니다. 당황하지말고 로그에 필요하다고 하는 패키지들을 다음과같이 install 해주세요. 1$ npm install [패키지명] 이 이후에 다시 hexo g -d 를 통해 github에 배포 후 사이트에 접속해보세요. icarus테마가 적용되어 보이면 성공입니다!이번 글에서는 hexo 블로그에 icarus 테마를 적용하는 방법에 대하여 알아 보았습니다. 다음 글에서는 icarus 테마의 일부분을 커스터마이징 하는 방법에 대해서 알아보겠습니다.","link":"/2020/04/20/hexo/hexo03/"},{"title":"github Blog 만들기 - icarus 테마 커스터마이징","text":"icarus 테마 살펴보기테마를 적용하고난 이후 기쁜마음에 이곳저곳 살펴보다보면 아래 사진처럼 뭐지 싶은 박스들을 볼 수 있습니다. 저도 github 사이트를 만들때 여러 블로그의 글을 보면서 도움을 받았지만, 사실 상 이 부분이 까다로웠습니다. icarus 테마를 다루는 블로거 분들은 모두 ejs 파일로 만들어진 icarus에 대하여 다루고있지만 본인이 다운받은 파일은 모두 react로 만들어져 있다는 것.. 현재 icarus 공식 github 사이트에 업로드 되어있는 파일은 react로 리팩토링되어 있는 것 같습니다. react를 조금이나마 흥미를 가지고 배운적이 있기에 긍정적인 마음으로 임하였지만 가장 큰 문제는 블로그에서 다루는 커스터마이징 파일은 ejs 또는 pug등의 파일들로 제공되어있는데, react 로 수정된 버전은 방법이 조금 달라진 것 같습니다. 다행이도 어느정도 시간을 두고 삽질을 하니 많은 부분이 해결이 되었습니다. 테마 일부 기능 삭제 / 추가하기위의 사진의 박스들이 어느정도 짐작이 가시나요? 각자 광고, 공유, 후원, 댓글기능 등을 추가할 수 있는 카드들이라는 것 입니다. 일단 광고와 후원은 현재로서는 사용하지 않을 예정이니 기능을 꺼놓도록 하겠습니다. -구글 광고 카드 삭제hexo 블로그 폴더에 있는 config 파일이 아닌 icarus 테마 폴더에 있는 _config.yml 파일을 열어주세요. # Google AdSense unit configurations 주석을 찾아 아래 내용과 같이 수정해주세요. 12345678910# Google AdSense unit configurations# 구글 광고 카드 / 사용시 adsense 앞의 #을 제거해주세요. - # Where should the widget be placed, left sidebar or right sidebar position: left type: #adsense # AdSense client ID client_id: '' # AdSense AD unit ID slot_id: '' -후원 기능 삭제위와 같이 _config.yml 파일을 열어 # Donate plugin configurations 주석 이하 내용을 삭제 또는 주석처리 해주세요. 123456789101112131415161718192021222324252627282930 # Donate plugin configurations# https://blog.zhangruipeng.me/hexo-theme-icarus/categories/Plugins/Donation/donates: # Alipay donate button configurations - type: alipay # Alipay qrcode image URL qrcode: '' # \"Buy me a coffee\" donate button configurations - type: buymeacoffee # URL to the \"Buy me a coffee\" page url: '' # Patreon donate button configurations - type: patreon # URL to the Patreon page url: '' # Paypal donate button configurations - type: paypal # Paypal business ID or email address business: '' # Currency code currency_code: USD # Wechat donate button configurations - type: wechat # Wechat qrcode image URL qrcode: '' -ShareThis(공유) 기능 연결하기ShareThis는 방문자가 여러 sns 등에 글을 공유할 수 있게 해주는 기능을 서비스 합니다. icarus(리액트 버전)테마 에서는 sharethis를 연결하는 방법이 조금 다릅니다. sharethis 사이트를 방문하여 원하는 공유 버튼을 제출을 하고 코드를 받습니다. 12345&lt;script type='text/javascript' src='blablablabla:example_code' async='async'&gt;&lt;/script&gt; 원래는 위의 코드전체를 ejs 파일에 붙여야 하지만 저희는 저 코드에서 src의 코드부분만 복사를 해둡니다. 위의 src내용은 임시로 작성한 것입니다. 본인이 본인 사이트의 주소를 입력하고 발급을 받아야합니다! 복사한 코드를 install_url 부분에 붙여넣어 줍시다. 123456# Share plugin configurations# https://ppoffice.github.io/hexo-theme-icarus/categories/Plugins/Share/share: type: sharethis # URL to the ShareThis share plugin script install_url: '' -Disqus를 사용하여 댓글 기능 셋팅하기Disqus는 소셜 댓글 서비스 입니다. 소셜 댓글 서비스란 소셜미디어(SNS)를 활용한 댓글 시스템으로 페이스북,트위터 와 같은 SNS와 연동해서 댓글을 달 수 있게 만들어 주는 서비스입니다. 소셜 댓글 서비스를 활용하여 댓글을 달면 동시에 해당 댓글이 자신이 연동한 SNS에도 발행이 됩니다. 위의 사이트에 들어가 회원가입을하고 무료버전 서비스를 받아봅시다. 이번에도 ShareThis처럼 다른 테마들과는 다르게 태그 등은 필요하지 않고 ‘short-name’ 값만 가져오면 됩니다. short-name은 회원가입한 ShareThis 아이디에 운영중인 홈페이지 URL을 연결하면 받을 수 있습니다. 그리고 _config.yml의 다음 부분에 short-name의 값을 붙여넣어 주세요. 123456# Comment plugin configurations# https://ppoffice.github.io/hexo-theme-icarus/categories/Plugins/Comment/comment: type: disqus # Disqus shortname shortname: '' # &lt;- 이 부분에 코드 넣기 여기까지 잘 진행이 되었다면 먼저 hexo server 로 확인을 해주시고 적용이 된 것을 확인하였다면 github에 배포해주시면 됩니다. 남은 프로필을 수정하거나 카드의 배치같은 부분도 _config.yml에서 할 수 있으니 자신만의 느낌대로 적용하시면 될 것 같습니다. 다음 글은 hexo 프레임워크에서 post 하는 방법등을 알아보겠습니다.","link":"/2020/04/20/hexo/hexo04/"},{"title":"나비보벳따우","text":"","link":"/2020/04/21/piano/piano-%EB%82%98%EB%B9%84%EB%B3%B4%EB%B2%B3%EB%94%B0%EC%9A%B0/"},{"title":"fate stay night - 운명의 밤","text":"","link":"/2020/04/27/piano/piano-%EC%9A%B4%EB%AA%85%EC%9D%98%20%EB%B0%A4/"},{"title":"짱구는 못말려 - 히로시의 회상","text":"","link":"/2020/04/27/piano/piano-%ED%9E%88%EB%A1%9C%EC%8B%9C%EC%9D%98%20%ED%9A%8C%EC%83%81/"},{"title":"기쿠지로의 여름 ost - Summer","text":"","link":"/2020/04/27/piano/piano-summer/"},{"title":"말할 수 없는 비밀 - 쇼팽왈츠(편곡)","text":"","link":"/2020/04/27/piano/piano-%EC%87%BC%ED%8C%BD%EC%99%88%EC%B8%A0/"},{"title":"JAVA - 05. 클래스의 정의","text":"클래스와 인스턴스자바로 작성된 코드를 관찰해보면 종류에 상관 없이 모든 프로그램은 다음 두가지로 이뤄진다는 사실을 알 수 있다. 데이터 : 프로그램상에서 유지하고 관리해야 할 데이터 기능 : 데이터를 처리하고 조작하는 기능 이중에서 데이터는 ‘변수의 선언’ 을 통해 유지 및 관리가 되고, 또 변수에 저장된 데이터는 ‘메소드의 호출’을 통해 처리가 된다. 이와 관련해서 다음 예제를 살펴보자. 1234567891011121314151617181920212223242526//BankAccountPO.javapublic class BankAccountPO{ static int balance = 0; // 예금 잔액 public static void main(String[] args){ deposit(10000); //입금 진행 checkMyBalance(); withdraw(3000); checkMyBalance(); } public static int deposit(int amount){//입금을 담당하는 메소드 balance += amount; return balance; } public static int withdraw(int amount){//출금을 담당하는 메소드 balance -= amount; return balance; } public static void checkMyBalance(){//예금 조회를 담당하는 메소드 System.out.println(\"잔액: \" +balance); }} 위의 클래스 BankAcountPO 를 보면 맴버변수 balance 와 메소드 deposit, withdraw, checkMyBalance 는 긴밀히 연관되어 있다. 긴밀히 연관되어있다는 것은 다음 내용을 뜻한다. 메소드 deposit, withdraw, checkMyBalance는 맴버변수 balance를 위한 메소드이다. 이렇듯 연관 잇는 변수와 메소드를 묶기 위해 ‘클래스’라는 것이 존재한다. 클래스를 이용하면 다음과 같이 변수 balance 그리고 이와 연관 있는 모든 메소드를 하나로 묶을 수 있다. 위의 코드를 가르켜 ‘클래스 정의’라 한다. 인스턴트 만들기상단에 선언된 변수 balance는 ‘인스턴트 변수’ 라고 한다. (또는 멤버변수, 필드 라고 불리기도 한다.) 인스턴트 변수 balance를 위해 존재하는 하위 메소드들은 ‘인스턴트 메소드’라고 한다. 인스턴트 변수는 앞서 변수의 스코프에서 다루었던 지역변수가 아니다. 인스턴트 변수가 선언된 위치는 메소드 내부가 아니므로 이 둘은 성격이 다르다. 이러한 인스턴스 변수의 중요한 특징 중 하나는 다음과 같다. 인스턴스 변수는 같은 클래스 내에 위치한 메소드 내에서 접근이 가능하다. 다음 예제를 살펴보자. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687class BankAccountPO{ int balance = 0; public int deposit(int amount){ balance += amount; return balance; } public int withdraw(int amount){ balance -= amount; return balance; } public void checkMyBalance(){ System.out.println(\"잔액: \" +balance); }}public class 인스턴스만들기 { public static void main(String[] args){ new BankAccountPO(); /** * @인스턴스 * 위의 문장을 실행하면 밑에 만들어둔 BankEx 에 정의된 변수와 메소드를 담고 있는 '인스턴스'라는 것이 * 만들어진다. 만들어져서 실제 메모리 공간에 존재하게 된다. * (인스턴스는 다른말로 객체라고도 한다. 인스턴스의 생성과 객체의 생성은 그 의미가 완전히 동일하다.) * * 물론 다음과 같이 둘, 혹은 그 이상도 만들 수 있다. */ new BankAccountPO(); new BankAccountPO(); /** * 이렇게 메모리상에 인스턴스를 만들기만 해서는 사용할 수가 없다. * 만들어진 인스턴스를 참조할 수 있는 무언가가 필요하다. * 그리고 이 무엇인가를 가리켜 '참조변수(Reference Variable)'이라고 한다. */ BankAccountPO june; //참조변수 myAcnt1의 선언 BankAccountPO james; //참조변수 myAcnt2의 선언 /** * 즉 다음과 같이 참조변수를 선언하고 이를 통해서 새로 생성되는 인스턴스(객체)를 가리키게 할 수 있다. */ june = new BankAccountPO02();//참조변수 june 이 새로 생성되는 인스턴스를 가리킴 james = new BankAccountPO02();//참조변수 james 가 새로 생성되는 인스턴스를 가리킴 /** * @new * 키워드 new 를 통해서 인스턴스를 생성하면 생성된 인스턴스의 주솟값이 반환된다. 즉 참조변수에는 생성된 인스턴스의 주솟값이 저장되는 셈이다. 하지만 다음과 같이 표현하고 인식하자. 이것보다 일반적인 표현이다. (주솟값은 참조변수에 저장된 값이기에 본서에서는 이 값을 '참조 값' 이라고 한다.) - 참조변수는 인스턴스를 참조한다. - 참조변수는 인스턴스를 가리킨다. 그리고 참조변수를 통해서 해당 인스턴스의 메소드를 호출하는것은 다음과 같다. */ //각 인스턴스를 대상으로 예금을 진행 june.deposit(10000); james.deposit(5000); //각 인스턴스를 대상으로 잔액을 조회 System.out.println(\"myAcnt1의 잔액 :\"); june.checkMyBalance(); System.out.println(\"myAcnt2의 잔액 :\"); james.checkMyBalance(); /** * 코드와 실행 결과를 보면, 참조변수 준과 제임스가 가리키는 인스턴스가 * 서로 다른 인스턴스인 것을 알 수 있다. */ /** * @참조변수에 null 대입 때로는 참조변소가 참조하는 인스턴스와의 관계를 끊고 아무런 인스턴스도 참조하지 않도록 할 필요가 있다. 그리고 이때에는 다음과 같이 참조변수에 null을 대입하면 된다. */ james = null; june = null; }} 인스턴스의 구분앞서 정의한 BankAccount클래스를 다시 관찰해보자. 은행에서는 고객이 계좌를 개설할 때마다 이 클래스의 인스턴스를 생성해야 한다. 그런데 문제는 인스턴스를 구분할 수 있는 정보가 빠졌다는 것이다. 즉 이전 예제에 최소한 다음 두가지 정도는 추가가 되어야 한다. 그래야 누구의 계좌인지 구분할 수 있다. 계좌번호 주민번호 이것을 반영하여 새로운 클래스를 만들어보자 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647class 인스턴트만들기{ public static void main(String[] args) { BankAccount jaebeom = new BankAccount(); jaebeom.initAccount(\"123-456-789\", \"950621\", 10000); jaebeom.deposit(5000); jaebeom.checkMyBalance(); BankAccount jongwon = new BankAccount(); jongwon.initAccount(\"321-654-987\", \"960113\", 10000); jongwon.withdraw(3000); jongwon.checkMyBalance(); }}class BankAccount{ String accNumber;//계좌번호 String ssNumber;//주민번호 int balance = 0;//예금 잔액 //초기화를 위한 메소드 public void initAccount(String acc, String ss, int bal) { accNumber = acc; ssNumber = ss; balance = bal; //계좌 개설 시 예금액으로 초기화 } public int deposit(int amount) { balance +=amount; return balance; } public int withdraw(int amount) { balance -=amount; return balance; } public void checkMyBalance() { System.out.println(\"계좌번호:\"+accNumber); System.out.println(\"주민번호:\"+ssNumber); System.out.println(\"잔액:\"+balance+\"\\n\"); }} 이번 예제에서는 새로운 메소드 initAccount가 추가되었다. 이 메소드는 다음과 같은 부분에서 다른 메소드들과 성격상 구분이 된다. -인스턴스의 초기화를 위한 메소드이다.-때문에 인스턴스 생성 시 반드시 한번 호출해서 초기화를 진행해야한다. 그러나 위와 같이 메소드를 정의하지 않고 ‘생성자(Constructor)’라는 것을 정의해서 인스턴스의 초기화를 진행할 수도 있다. 생성자는 인스턴스 생성 과정에서 초기화를 위해 자동으로 호출되는 일종의 메소드이다. 생성자의 정의생성자는 메소드와 모습이 같다. 따라서 생성자를 ‘생성자 메소드’ 로 표현하는 경우도 있다. 그러나 생성자는 다음과 같은 부분에서 메소드와 차이가 있다. 달리 말하면 이는 생성자가 되기 위한 조건이기도 하다. 생성자의 이름은 클래스의 이름과 동일해야 한다. 생성자는 값을 반환하지 않고 반환형도 표시하지 않는다. 위의 조건을 모두 만족하면 이는 자바 컴파일러에 의해서 생성자로 인식된다. 따라서 인스턴스 생성 시 자동으로 호출되어 인스턴스를 초기화 하게 된다. 그럼 앞서 예제에서 인스턴스 초기화를 위해 생성자를 만들어보자 12345678910111213141516class Person{ String name; int age; //생성자 public Person(String name, int age){ this.name = name; //this키워드는 class의 인스턴스 변수 자신을 가리킨다. 나중에 더 자세히 다루어보자. this.age = age; } public void myInfo(){ System.out.println(\"저의 이름은 \" +name+\" 입니다.\"); System.out.println(\"나이는 \"+ age +\" 입니다.\"); }} 위의 예제에 생성자를 보면 클래스와 이름이 동일하다. 그리고 반환하지 않으며 , 반환형도 선언하지 않았다. 따라서 생성자의 조건을 모두 갖췄다. 그리고 인스턴스를 메소드 main에서 생성할때 매개변수로 이름과 나이가 전달이 된다. 즉 위와같이 문장을 구성하면 ‘인스턴스 생성 마지막 단계’ 에서 다음의 생성자가 호출되면서 값들이 전달된다. 그리고 이 값들로 인스턴스 변수가 초기화 된다. 생성자와 관련하여 다음 사실을 반드시 기억해야 한다. 인스턴스 생성의 마지막 단계는 생성자 호출이다. 어떠한 이유로든 생성자 호출이 생략된 인스턴스는 인스턴스가 아니다. 디폴트 생성자(Default Constructor)인스턴스 생성의 마지막 단계는 생성자 호출이라 하였다. 그리고 생성자 호출이생략된 인스턴스는 인스턴스가 아니라고 하였다. 하지만 앞서 생성자가 없는 클래스를 수차례 정의하였고 이들을 대상으로 인스턴스를 생성한 바 있다. 그렇다면 이렇게 생성된 인스턴스는 인스턴스가 아니란 뜻인가?사실 다음과 같이 생성자를 생략한 상태의 클래스를 정의하면 자바 컴파일러가 ‘디폴트 생성자’ 라는 것을 클래스의 정의에 넣어준다. 1234567class Person{ //디폴트 생성자 public Person(){ //empty }} 위에서 보이듯이, 디폴트 생성자는 인자를 전달받지 않는 형태로 정의되어 삽입된다. 물론 내부적으로 하는 일도 없다. 하지만 이로 인해서 인스턴스의 생성 규칙인 ‘생성자의 호출’ 은 유지가 된다. 생성자를 정의하지 않더라도 말이다. 그런데 컴파일러에 의해서 디폴트 생성자가 삽입이 되더라도 생성자는 직접 정의해주는것이 좋다. 아주 예외적인 상황이 아니라면, 생성자가 필요 없는 클래스는 잘 정의된 클래스가 아닐 확률이 높기 때문이다. 본 문서는 책의 일부 내용을 발췌한 것으로서 온오프라인 상의 무단 배포를 금합니다.","link":"/2020/04/26/java%20%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5/java05-%ED%81%B4%EB%9E%98%EC%8A%A4%EC%9D%98%20%EC%A0%95%EC%9D%98/"},{"title":"JAVA - 04. 메소드와 변수의 스코프","text":"메소드의 정의앞서 예제를 작성하고 호출하기 위해 main메소드 안에서 작업한것을 알 수 있다. main메서드는 클래스의 내부에 존재해야한다. 지금까지 만들어온 메서드의 이름이 항상 main인 이유는 다음 약속에 근거한다. 자바 프로그램은 main이라는 이름의 메소드에서부터 시작을 한다. 따라서 추가로 만들게 될 메소드의 이름은 다음과 같이 직접 결정하면 된다. 1234public static void hiEveryone(int age) { System.out.println(\"좋은 아침입니다.\"); System.out.println(\"제 나이는 \" + age+\" 입니다.\");} 위의 코드 내용을 가리켜 ‘메소드 정의’라 한다. 즉 위의 코드는 ‘메소드 hiEveryone의 정의’이다. hiEveryone의 오른편 소괄호에는 정수형 변수 age가 있다. 이 변수가 어떻게 활용되는지 보자. 123public static void main(String[] args) { hiEveryone(26); } 위의 결과를 보면 ‘좋은 아침입니다. 제 나이는 26입니다.’ 가 출력되는 것을 볼 수 있다. 즉 main 메서드에서 hiEveryone메서드를 호출하고 파라미터로 26을 전달하는 것 이다. 일단 public 과 static은 무시하고 여기서 알 수 있는건 메서드를 정의 할때는 123자료형(리턴타입) | 메서드명 | (매개변수를 받으면 소괄호안에 해당하는 타입의 변수를 작성){ //중괄호 안에 로직 작성} 으로 만들 수 있고, 메서드 사용시에는 1메서드명(매개변수를 만들었다면, 전달할 인자값 작성); 으로 사용할 수 있다. 물론 매개변수는 하나 이상 사용이 가능하다. 밑의 예제를 보자. 1234567public static void myInfo(String name, int age) { System.out.println(\"제 이름은 \"+ name+\" 이고, 나이는 \" + age+\" 입니다.\");}public static void main(String[] args){ myInfo(\"고재범\", 26);} 이처럼 매개변수를 두개, 혹은 그이상도 사용할 수 있다. 메소드의 반환값이전에 다루었던 method는 매개변수를 사용하는 정도까지 알아보았다. 하지만 method의 실제 사용되는 모습이랑은 많이 다르다. 이번엔 method를 정의할 때 값을 반환 하는 방법을 알아보자. 1234public static int add(int a, int b) { return a+b;} 위의 메소드를 보면 void였던 부분에 int 가 들어가있다. 저 부분은 반환형을 지정하는 곳 인데, 지금까지 값을 반환하지 않았기 때문에 void를 사용하였다. void는 값을 return 하지 않는다고 선언하는 방법이다. 하지만 위의 예제는 정수타입의 값을 return하고 있기때문에 반환형으로 int를 사용하였다. 그럼 return의 정확한 의미는 무엇일까? 다음과 같다. 메소드를 호출한 영역으로 값을 반환 메소드의 종료 메소드의 종료는 알겠는데, 메소드를 호출한 영역으로 값을 반환한다는건 무슨 소리일까? 다음 예제를 보자. 12345public static void main(String[] args) { int num = add(1,2); System.out.println(num);} 정수형 변수 num을 선언하고 add()메소드로 초기화하고있다. 메소드 add는 반환 타입이 정수였다. 그렇기때문에 정수형 변수의 값으로 담을 수 있게 되는 것 이다. 이때는 정확히 메소드 add의 반환 값이 담긴다고 생각하면 되겠다. 이것은 위에서 설명한 메소드를 호출한 영역으로 값을 반환한다는 것과 같은 맥락이다. 위의 목적은 메소드 add에게 값을 전달해 연산을 하도록하여 연산된 값을 이부분에서 출력해보기 위한 것 같다. 그렇다면 저렇게 변수에 담지 않고 바로 출력하는 것도 가능하다. 123public static void main(String[] args){ System.out.println(add(10,10));} 변수의 스코프지금까지 중괄호 {…}가 사용되었던 때를 정리해 보면 다음과 같다. if문 또는 switch문 같은 조건문에 사용되었다 for , while등의 반복문에 사용되었다. 메소드의 몸체 부분을 감싸는 용도로 사용되었다. 이처럼 중괄호는 다양한 경우에 사용된다. 그런데 이렇듯 중괄호로 특정 영역을 감싸면, 해당 영역은 변수에 관한 별도의 스코프를 형성하게 된다. 예를 들어서 다음과 같이 if문 안에 변수가 선언되게 되면 123456public static void main(String[] args) { if(true) { int num = 0; } //System.out.println(num); 주석을 처리하면 에러가 난다.} if문 밖에서는 변수 num을 사용할 수 없다. 이 변수 num은 중괄호 내에서만 접근이 가능하며,중괄호를 벗어나는 순간 소멸되어 접근이 불가능한 변수가 된다. 좋은 예는 아니지만 이말은 즉 똑같은 변수명으로 괄호 밖에서 다시 선언할 수 있다. 123456789public static void main(String[] args) { if(true) { int num = 0; } //System.out.println(num); 주석을 처리하면 에러가 난다. int num = 0; System.out.println(num);} 지금까지 설명한 중괄호 내에 선언된 변수들을 가리켜 ‘지역변수(Local Variable)’라 한다. 그리고 for문의 초기화 부분에서 선언되는 변수화 매개변수까지도 지역변수의 범주에 포함된다. 그런데 이러한 지역변수들이 갖는 중요한 특징이 하나 있다. 지역변수는 선언된 지역을 벗어나면 메모리 공간에서 소멸된다. 즉 선언된 지역을 벗어나면 단순히 접근만 불가능해지는 것이 아니라 메모리상에서 삭제가 되는 것이다. 본 문서는 책의 일부 내용을 발췌한 것으로서 온오프라인 상의 무단 배포를 금합니다.","link":"/2020/04/22/java%20%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5/java04-%EB%A9%94%EC%86%8C%EB%93%9C%EC%99%80%20%EB%B3%80%EC%88%98%EC%9D%98%20%EC%8A%A4%EC%BD%94%ED%94%84/"},{"title":"JAVA - 06. 정보은닉과 캡슐화","text":"정보은닉자바에서 말하는 정보는 클래스의 인스턴스 변수를 의미한다. 따라서 정보를 은닉한다는 것은 인스턴스 변수를 숨긴다는 뜻이다. 다음 예제를 다루어보면서 정보은닉이 필요한 이유에 대해서 알아보자. 1234567891011121314151617181920212223242526272829303132333435363738class 정보은닉_예제{ public static void main(String[] args) { Circle c = new Circle(1.5); System.out.println(c.getArea()); c.setRad(2.5); System.out.println(c.getArea()); c.radius = 5;//옳지 않은 접근 방법, 그리고 문제가 되는 부분 System.out.println(c.getArea()); }}//원의 너비를 구하는 클래스class Circle{ double radius = 0;//원의 반지름 final double PI = 3.14;//원주율 public Circle(double r) { setRad(r); } public void setRad(double r) { if(r&lt;0) {//반지름은 0보다 작을 수 없으므로 radius = 0; return;//아무것도 반환하지 않고 메소드에서 빠저나간다. } radius = r; } public double getArea() { return (radius * radius) * PI;//원의 너비 반환 }} 위 예제 18, 19번째 줄에서 보이듯이 인스턴스 변수는 선언과 동시에 초기화를 할 수 있다. 특히 PI의 경우 그 값이 상수이므로 생성자를 통한 초기화보다 위의 방식의 초기화가 더 어울린다. 그렇다면 25번째 줄의 setRad 메소드를 보자. 위 메소드 정의를 통해서 Circle 클래스를 정의한 이의 다음 의도를 읽을 수 있다. 반지름의 길이 radius에 0 보다 작은 값이 저장되는 일이 발생하지 않도록 하겠다. 때문에 이러한 의도를 따르기 위해서라도 반지름의 길이를 변경할 때에는 반드시 위의 메소드 호출을 통해서만 변경을 진행해야 한다. 이렇듯 인스턴스 변수에 저장되는 값의 종류와 범위는 해당 클래스를 정의한 사람이 가장 정확히 안다. 따라서 클래스 사용자가 잘못된 값을 인스턴스 변수에 저장하지 않도록 위와 같은 유형의 메소드를 제공해야한다. 그런데 위의 예제에서는 프로그램 사용자의 실수로 다음과 같은 잘못된 접근이 발생하였다. 10번째 줄의 c.radius = 5; 이렇듯 인스턴스 변수의 직접적인 접근을 허용하면, 컴파일 과정에서 드러나지 않는 중대한 실수가 발생할 수 있다. 이러한 오류는 실행 결과에서도 드러나지 않아 더 큰 문제가 된다. 때문에 위와 같은 접근을 허용하지 않도록 클래스를 설계할 필요가 있다. 그리고 이러한 클래스의 설계를 가리켜 ‘정보 은닉’ 이라 한다. Getter 와 Setter12345678910111213141516171819202122232425262728293031323334353637383940414243public class Getter와Setter { /** * 이전에서 만든 클래스를 '정보 은닉'의 조건을 충족하게 다시 만들어보자. */ public static void main(String[] args) { Circle02 c = new Circle02(3); System.out.println(\"반지름: \" + c.getRadius()); System.out.println(\"넓 이:\" + c.getArea()); c.setRadius(3.5); System.out.println(\"반지름: \" + c.getRadius()); System.out.println(\"넓 이:\" + c.getArea()); }}class Circle02{ private double radius = 0; private final double PI = 3.14; public Circle02(double r) { setRadius(r); } public void setRadius(double r) { if(r&lt;0) { radius = 0; return; } radius = r; } public double getRadius() { return radius; } public double getArea() { return (radius*radius)*PI; }} 이전과 다른점들을 살펴보자. 일단 21, 22 번줄의 인스턴스 변수의 선언 앞에 private라는 접근 수준 지시자(접근제한자가 붙어있다.) 그리고 이것이 의미하는 바는 다음과 같다. 클래스 내부에서만 접근을 허용하겠다. 따라서 클래스 외부에서 prviate으로 선언된 변수에 접근할 경우 컴파일 오류가 발생한다. 그렇다면 저 변수를 어떻게 사용해야 할까? 자바에서는 상태는 외부로부터 숨기고 오직 동작(메소드)를 통해서만 상태를 제어할 수 있는 방식을 권장하고 있다. 따라서 위의 두 유형의 메소드를 통해 값을 설정하고, 전달하는 일을 할 수있다. 상단의 setRadius는 값의 설정을 위한 메소드이고, 메소드 getRadius는 값의 참조를 위한 메소드이다. 이렇듯 값의 설정과 참조를 위한 메소드를 가리켜 각각 다음과 같이 부른다. getter 인스턴스 변수의 값을 참조하는 용도로 정의된 메소드 변수의 이름이 name일 때, 메소드의 이름은 getName으로 짓는 것이 관계 setter 인스턴스 변수의 값을 설정하는 용도로 정의된 메소드 변수의 이름이 name일 때 , 메소드의 이름은 setName으로 짓는 것이 관례 private으로 선언된 모든 인스턴스 변수를 대상으로 게터와세터를 반드시 정의해야 하는 것은 아니다. 필요에 따라 정의하면 된다. 그러나 당장 필요하지 않더라도 나중을 고려하여 게터와 세터를 정의하기도 한다. 접근 수준 지시자앞의 예제에서 인스턴스 변수를 대상으로 private 선언을 하였는데, 이러한 유형의 키워드를 가리켜 ‘접근 수준 지시자 (Access-level Modifiers)’ 라 한다. 또는 ‘접근 제한자’ 라고도 한다. 이름 그대로 접근의 허용 수준을 결정할 때 선언하는 키워드이다. 접근제한자의 종류는 다음과 같이 4가지 이다. public, protected, private, default 이중에서 default는 키워드가 아닌, 아무런 선언도 하지 않은 상황을 의미한다. 비록 이는 키워드가 아닌 일종의 상황이지만 이 역시 접근 제한자의 한 종류로 구분을 한다. 그리고 이러한 선언을 할 수 있는 대상은 다음 두 가지이다. 클래스의 정의 클래스의 인스턴스 변수와 메소드 클래스의 정의를 대상으로는 다음 두 가지 선언이 가능하다. 클래스 정의대상 : public ,default 그리고 인스턴스 변수와 메소드를 대상으로는 다음 네 가지 선언이 모두 가능하다. public, protected, private, default 그럼 이제 각각의 기능을 알아보자. 클래스 정의 대상의 public 과 default 선언이 갖는 의미 public : 어디서든 인스턴스(객체) 생성이 가능하다. default : 동일 패키지로 묶인 클래스 내에서만 인스턴스 생성을 허용한다. 인스턴스 멤버 대상의 public , protected, private, default 선언이 갖는 의미 접근제한자 클래스 내부 동일 패키지 상속 받은 클래스 이외의 영역 private o x x x default o o x x protected o o o x public o o o o 위의 표에서 말하는 이외의 영역은 다른 패키지에 속한 클래스를 뜻한다. 즉 서로 다른 패키지에 속한 두 클래스 사이의 접근을 의미한다. 그리고 위 표의 내용을 기준으로 접근 허용 범위에 대하여 다음과 같이 이해하고 있는 것도 도움이 된다. public &gt; protected &gt; default &gt; private 캡슐화캡슐화는 정보 은닉과 더불어 객체지향 기반의 클래스 설계에 있어 가장 기본이면서 중요한 원칙 중 하나이다. 캡슐화는 문법적인 내용은 아니다. 클래스 안에 ‘무엇을 넣을까’ 에 대한 이론을 제시한는 내용이다. 캡슐화를 다음과 같이 정의할 수 있다. 하나의 목적을 이루기 위해 관련 있는 모든 것을 하나의 캡슐에 담아 두는 것 물론 객체지향 관점에서 위의 캡슐은 클래스에 해당한다. 즉 위의 문장은 다음과 같이 다시 쓸 수 있다. 하나의 목적을 이루기 위해 관련 있는 모든 것을 하나의 클래스에 담아 두는 것 무조건 많이 담는다고 해서 캡슐화가 아니다. 부족해도 안되고 넘쳐도 문제가 된다. 그리고 상황 및 목적에 따라서 동일한 이름의 클래스에도 담기는 내용이 달라진다. 캡슐화에 대한 예제들은 github 에 올려두었던 다음 예제들을 참고하면 괜찮을 것 같다. 캡슐화 예제 01 캡슐화 예제 02 캡슐화 예제 03 본 문서는 책의 일부 내용을 발췌한 것으로서 온오프라인 상의 무단 배포를 금합니다.","link":"/2020/04/26/java%20%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5/java06-%EC%A0%95%EB%B3%B4%EC%9D%80%EB%8B%89%EA%B3%BC%20%EC%BA%A1%EC%8A%90%ED%99%94/"},{"title":"JAVA - 08. 클래스 메소드","text":"클래스 메소드(static 메소드)클래스 내에 정의된 메소드에 static 선언을 하면 ‘클래스 메소드’가 된다. 그리고 클래스 메소드는 그 성격이 클래스 변수와 유사하다.접근 방법도 동일하며 인스턴스 생성 이전부터 호출이 가능한, 그리고 어느 인스턴스에도 속하지 않는 메소드라는 점도 클래스 변수와 동일하다. 클래스 메소드의 정의와 호출이전 글에서 공부한 클래스 변수의 특성 두 가지는 다음과 같다. 인스턴스 생성 이전부터 접근이 가능하다. 어느 인스턴스에도 속하지 않는다. 이 두 가지는 클래스 메소드도 동일하게 갖는 특성이다. 따라서 이 사실을 다음 예제를 통해서 확인해보겠다. 12345678910111213141516171819202122232425262728293031323334353637public class 클래스메소드_정의 { public static void main(String[] args) { NumberPrinter.showInt(50);// 클래스 이름을 통한 클래스 메소드 호출 /** * 사실 위의 문장만 보더라도 클래스 메소드가 어느 인스턴스에도 속하지 않는다는 사실을 알 수 있다. * 인스턴스 생성 이전에 호출이 되었기 때문이다. * 그리고 예제의 주석에서 설명하고 있듯이 클래스의 내부와 외부에서 클래스 메소드를 호출하는 방법은 * 클래스 변수에 접근하는 방법과 차이가 없다. */ NumberPrinter np = new NumberPrinter(); np.showDouble(3.15); // 인스턴스 이름을 통한 클래스 메소드 호출 np.setMyNumber(30); np.showMyNumber(); }}class NumberPrinter{ private int myNum = 0; static void showInt(int n) {//클래스 메소드 System.out.println(n); } static void showDouble(double n) {//클래스 메소드 System.out.println(n); } void setMyNumber(int n) {//인스턴스 메소드 myNum = n; } void showMyNumber() {//인스턴스 메소드 showInt(myNum); }} 다음 질문에 답해보자. 클래스 메소드에서 같은 클래스에 선언된 인스턴스 변수에 접근이 가능한가? 이는 다음과 같은 코드의 작성이 가능한지를 묻는 질문이다. 12345678public class 클래스메소드_심화 { //int num =0; //static void addNum(int n) { // num = n; //}} 위의 문장에 주석을 풀면 에러가 난다. 논리적으로 생각을 하면 위와 같은 문장 구성이 불가능하다는 것을 알 수 있다. 인스턴스 변수는 인스턴스에 속한다. 더불어 인스턴스가 생성이 되어야 메모리 공간에 존재하게 된다. 반면 클래스 메소드는 인스턴스 생성 이전부터 호출이 가능하다. 따라서 위 질문에 대해서 다음과 같이 대답할 수 있다. 클래스 메소드는 인스턴스에 속하지 않으므로 인스턴스 변수에 접근이 불가능하다. 같은 이유로 클래스 메소드는 인스턴스 메소드의 호출도 불가능하다. 그러나 클래스 메소드 같은 클래스에 정의되어 있는 다른 클래스 메소드나 성격이 동일한 클래스 변수에는 접근이 가능하다.(당연한 얘기지만..) System.out.println 그리고 main 메소드지금까지 main 메소드를 정의할 때 그 앞에 static 선언을 붙여왔다. 그리고 인스턴스의 생성 없이 println 메소드를 호출해 왔다. System.out.println()에서 out과 println의 정체는?static 선언의 의미를 알았으니 sysout의 구성을 이해할 수 있다. 일단 System은 자바에서 제공하는 클래스로 java.lang 패키지에 묶여있다. 따라서 원칙적으로는 다음과 같이 호출해야 한다. java.lang.System.out.println(…); 그러나 컴파일러가 다음 문장은 삽입 해주기때문에 패키지의 이름부분은 생략할 수 있다. import java.lang.*; 그리고 out은 System.out으로 접근을 하니, 이는 분명 static으로 선언된 클래스 변수가 분명하다.클래스의 이름을 통해 접근하니 말이다.실제로 out은 System 클래스 내에 다음과 같이 선언된 클래스 변수이다. 1234public final class System extends Object{ public static final PrintStream out; //참조변수} 마지막으로 println은 PrintStream 클래스의 인스턴스 메소드이다. 따라서 다음 문장을 보면서, System.out.println(…); 다음과 같이 이해 할 수 있어야 한다. System에 위치한 클래스 변수 out이 참조하는 인스턴스의 println 메소드를 호출하는 문장 main 메소드가 public 이고 static인 이유에 대해서 알아보자.main 메소드는 반드시 다음의 모양새를 갖춰야 한다. 123public static void main(String[] args) { } 이렇듯 main 메소드는 public 으로 그리고 static으로 선언해야 한다. 이는 일종의 약속이다. main메소드의 호출이 이뤄지는 영역은 클래스 외부이다. 따라서 public으로 선언하는 것이 타당함을 알 수 있다. 그리고 main메소드는 인스턴스가 생성되기 이전에 호출된다. 따라서 static 선언하는 것이 옳음을 알 수 있다. 다음의 예제를 보자. Car클래스와 Boat 클래스를 정의 하였다. 다음의 main 메소드가 호출이 되어 실제 실행이 되게 하려고 한다면 어떤 클래스에 두어야 할까? 1234567891011class Car{ void myCar() { System.out.println(\"밴츠\"); }}class Boat{ void myBoat() { System.out.println(\"보트\"); }} main 메소드는 static 메소드이기 때문에, 즉 특정 인스턴스의 맴버로 존재하는 메소드가 아니기 때문에 정답은 어디든 상관은 없다. (물론 실행방식에선 차이가 발생한다. Car클래스에 두었으면 java Car 를 호출, Boat면 java Boat 호출) 그렇다면 Car클래스에 두었다고 가정해보자. main 메소드를 Car 클래스 내에 위치시켰는데 그 안에서 Car 인스턴스를 생성하고 있다. 혹시 이부분이 조금 난해하게 느껴지는가? 그렇다면 다음과 같이 생각하자. Car클래스와 static으로 선언된 main메소드는 사실상 별개다. 다만 Car 클래스가 main 메소드에게 공간을 제공했을 뿐이다. 본 문서는 책의 일부 내용을 발췌한 것으로서 온오프라인 상의 무단 배포를 금합니다.","link":"/2020/04/26/java%20%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5/java08-%ED%81%B4%EB%9E%98%EC%8A%A4%20%EB%A9%94%EC%86%8C%EB%93%9C/"},{"title":"JAVA - 07. 클래스 변수","text":"클래스 변수(static 변수)인스턴스 변수는 인스턴스가 생성되었을 때, 생성된 인스턴스 안에 존재하는 변수이다. 그러나 클래스 변수는 인스턴스의 생성과 상관없이 존재하는 변수이다. 클래스 내에 선언된 변수 앞에 static 키워드를 붙이면 이는 인스턴스 변수가 아닌 클래스 변수가 된다. 이러한 클래스 변수의 특성을 파악하기 위해서 다음 예제를 관찰하자. 1234567891011121314151617class InstCnt{ static int instNum = 0;// 클래스변수 (static 변수) InstCnt(){//생성자 instNum++; //static으로 선언된 변수의 값 증가 System.out.println(\"인스턴스 생성:\"+instNum); }}public class Static변수_선언 { public static void main(String[] args) { InstCnt cnt1 = new InstCnt(); InstCnt cnt2 = new InstCnt(); InstCnt cnt3 = new InstCnt(); }} 클래스 InstCount의 생성자에서 static으로 선언된 변수 instNum의 값을 하나 증가시킨 다음에 그 결과를 출력하고 있다. 그런데 출력 결과를 보면 그 값이 인스턴스 생성 시마다 1씩 증가함을 알 수 있다. 그리고 이를 통해 다음 사실을 알 수 있다. static으로 선언된 변수는 변수가 선언된 클래스의 모든 인스턴스가 공유하는 변수이다. 클래스 변수는 인스턴스 내에 존재하는 변수가 아니라 ‘어떠한 인스턴스에도 속하지 않는 상태로 메모리 공간에 딱 하나만 존재하는 변수’ 이다. 다만 이 변수가 선언된 클래스의 인스턴스들은 이 변수에 바로 접근할 수 있는 권한이 있을 뿐 이다. 본 문서는 책의 일부 내용을 발췌한 것으로서 온오프라인 상의 무단 배포를 금합니다. 클래스 변수 접근 방법클래스 변수도 ‘접근 수준 지시자’ 의 규칙을 그대로 적용받기 때문에 public으로 선언되면 어디서든 접근이 가능하다. 물론 접근 방법에 있어서는 차이를 보이는데 이와 관련된 내용은 이어서 설명하겠다. 클래스 변수에 접근하는 방법은 접근 영역을 기준으로 다음과 같이 크게 두 가지로 나뉜다. 클래스 내부 접근 : 변수의 이름을 통해 직접 접근 클래스 외부 접근 : 클래스 또는 인스턴스의 이름을 통해 접근 다음예제를 보면서 클래스 변수의 접근 방법을 알아보자. 12345678910111213141516171819202122232425class AccessWay{ static int num = 0; AccessWay(){ incrCnt(); } void incrCnt() { num++; //클래스 내부에서 이름을 통한 접근 }}public class example01{ public static void main(String[] args) { AccessWay way = new AccessWay(); way.num++; //외부에서 인스턴스의 이름을 통한 접근 AccessWay.num++; //외부에서 클래스의 이름을 통한 접근 System.out.println(\"num = \" + AccessWay.num);// 총 3이 찍힌다. AccessWay way2 = new AccessWay();//way2라는 새로운 AccessWay의 인스턴스를 생성하였다. System.out.println(way2.num);//그리고 way2의 클래스변수 num을 조회 하였는데 값은 4가 찍힌다. } } 인스턴스의 이름을 통한 접근 방법을 보면서, 클래스 변수를 인스턴스 내부에 위치한 것으로 오해하면 안된다. 그리고 클래스 변수 num은 default로 선언되었다. 따라서 클래스 내부는 물론 클래스 외부이더라도 동일 패키지로 묶여 있으면 접근이 가능하다. 클래스 변수의 초기화클래스 변수는 인스턴스의 생성과 상관이 없다고 하였다. 그렇다면 클래스 변수는 언제 메모리 공간에 할당되고 초기화될까? 이와 관련하여 다음 예제를 보자. 12345678910111213141516class InstCnt{ static int instNum = 100; InstCnt(){ instNum++; System.out.println(\"인스턴스 생성: \"+instNum); }}public class 클래스변수_초기화 { public static void main(String[] args) { InstCnt.instNum -=15; //인스턴스 생성 없이 instNum에 접근 System.out.println(InstCnt02.instNum); }} 위의 예제를 통해서 언급하고 싶은 내용은 다음과 같다. 클래스 변수는 인스턴스 생성 이전에 메모리 공간에 존재한다. 결론을 말하면, 클래스 변수는 해당 클래스 정보가 가상머신에 의해 읽히는 순간 메모리 공간에 할당되고 초기화 된다. 그리고 한 가지 확실한 것은 이러한 할당과 초기화는 위의 예제에서 보이듯이 인스턴스의 생성과 문관하게 이뤄진다는 점이다. 따라서 다음과 같이 생성자를 통한 클래스 변수의 초기화를 진행하지 않도록 주의해야 한다. 1234567class InstCnt{ static int instNum =100; //클래스 변수의 정상적인 초기화 방법 InstCnt(){ instNum = 0;// 클래스 변수의 초기화가 아니다! } } 위의 클래스 변수 instNum 은 100으로 초기화 된다. 클래스 정보가 가상머신에 의해 읽히는 순간 100으로 초기화된다. 그런데 생성자에서 변수 instNum을 0으로 다시 초기화 한다. 따라서 인스턴스가 생성될 때마다 instNum은 매번 그 값이 0으로 바뀌게 된다. 클래스로딩앞서 설명에서 클래스 정보를 가상머신이 읽는다 는 표현을 썼는데, 이렇듯 가상머신이 특정 클래스 정보를 읽는 행위를 가리켜 클래스 로딩 이라 한다. 그리고 특정 클래스의 인스턴스 생성을 위해서는 해당 클래스가 반드시 가상머신에 의해 로딩되어야 한다. 즉 인스턴스 생성보다 클래스 로딩이 먼저이다. 본 문서는 책의 일부 내용을 발췌한 것으로서 온오프라인 상의 무단 배포를 금합니다.","link":"/2020/04/26/java%20%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5/java07-%ED%81%B4%EB%9E%98%EC%8A%A4%20%EB%B3%80%EC%88%98/"},{"title":"JAVA - 10. this 키워드","text":"this의 의미자바에서 제공하는 this 키워드는 인스턴스 자기 자신를 가리키는 키워드이다. 이 this 키워드를 통해 클래스 메서드 및 생성자에서 자기 자신의 데이터를 업데이트하거나 조작할 수 있다. this를 이용한 생성자 호출this를 이용하여 생성자를 호출하는 방법을 알아보자. 1234567891011121314151617181920212223public class this를_이용한_생성자호출 { public static void main(String[] args) { new Person(0); }}class Person{ Person(){ System.out.println(\"생성자 1\"); } Person(int num1, int num2){ System.out.println(\"생성자 2\"); } Person(int num){ this(3, 4); System.out.println(\"생성자 3\"); }} 위의 예제를 보면 this 키워드를 이용하여 다른 생성자를 호출하고있다. 정수를 하나 받는 인스턴트를 새로 호출하자, 생성자2, 생성자3 이 콘솔에 출력된다. 생성자 3이 사용이 되었는데 생성자 3에서는 this(3, 4) 라는 키워드가 먼저 작성되어있다.여기서 this는 오버로딩된 다른 생성자를 의미한다. 거기에 정수를 두개 받는 생성자를 찾기때문에 생성자 2가 먼저 호출이 되고 그다음 출력문을 만나 생성자 3이 콘솔에 찍히게 된다. this - 인스턴수 변수 접근앞서 키워드 this를 이용한 생성자의 호출에 대해 설명했는데, this는 다른 의미로도 사용이 된다. 이와 관련하여 다음 예제를 보자. 12345678910111213141516public class this_인스턴스변수_접근 {}class Animal{ private String name; void setName(String name) { this.name = name; } String getName(){ return this.name; }} 위와 같이 매개변수의 이름이 인스턴스 변수의 이름과 동일하게 선언된 경우, 선언된 지역 내에서의 해당 이름은 매개변수를 의미하게 된다.하지만 키워드 this를 이용하면 이 영역 안에서도 인스턴스 변수에 접근할 수 있다. 즉 this.name에서 this가 의미하는 것은 ‘이 문장이 속한 인스턴스’ 이다. 따라서 this.name은 인스턴스 변수 name을 의미하는 것이 된다. 본 문서는 책의 일부 내용을 발췌한 것으로서 온오프라인 상의 무단 배포를 금합니다.","link":"/2020/04/26/java%20%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5/java10-this%20%ED%82%A4%EC%9B%8C%EB%93%9C/"},{"title":"JAVA - 09. 메소드 오버로딩(Overloading)","text":"오버로딩(overloading)한 클래스 내에 동일한 이름의 메소드를 둘 이상 정의한느 것은 허용되지 않는다. 그러나 매개변수의 선언이 다르면 가능하다. 그리고 이것을 메소드 오버로딩이라 한다. 메소드 오버로딩의 조건 메소드의 이름 메소드의 매개변수 정보 123456789101112131415public class 메소드_오버로딩 { void exMethod() { } void exMethod(int num1) { } void exMethod(int num1, int num2) { } void exMethod(String str) { }} 위의 예제를 보면 알 수 있듯이 메소드의 이름이 같지만 오류를 일으키지 않고 선언이 가능하다. 첫번째 메소드는 매개변수가 없다. 두번째 메소드는 매개변수를 한개 받는다 세번째 메소드는 매개변수를 두개 받는다.(물론 그 이상도 가능하다.) 네번째 메소드는 두 번째와 같이 매개변수를 하나 받지만 매개변수의 형이 String으로 2번째인 int형과 다르기 때문에 가능하다. 즉 매소드의 매개변수가 타입과, 받는 개수가 다르다면 오버로딩이 성립한다. 하지만 다음과 같은 애매한 상황이 있다. 예제를 보자. 123456789101112131415class Example{ void simple(int p1, int p2) { System.out.println(\"메소드 1\"); } void simple(int p1, double p2) { System.out.println(\"메소드 2\"); }}public class Test{ public static void main(String[] args) { Example ex = new Example(); ex.simple(1, 'K'); }} 위의 메소드 호출은 애매하다. 이유는 메소드의 인자 전달 과정에서 발생하는 형 변환 때문이다. 사실 위의 Example 클래스에는 정수와 ‘문자’를 인자로 전달받는 simple 메소드가 정의되어 있지 않다. 때문에 자동 형 변환 규칙을 적용하여 호출할 메소드를 찾게 된다. 그런데 문제는 클래스에 정의된 두 simple 메소드 모두 형 변환 규칙을 적용했을 때 호출이 가능하다는데 있다. 그래서 위의 메소드 호출문은 애매하다고 하는 것이 좋다. 결론을 말하자면 이러한 상황에서는 자동 형 변환 규칙을 적용하되 가장 가까운 위치에 놓여있는 자료형으로의 형 변환을 우선 시도한다. 때문에 위의 메소드 호출문에 의해 int형 정수 두개를 받는 simple 메소드가 실행된다. 본 문서는 책의 일부 내용을 발췌한 것으로서 온오프라인 상의 무단 배포를 금합니다.","link":"/2020/04/26/java%20%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5/java09-%EB%A9%94%EC%86%8C%EB%93%9C%20%EC%98%A4%EB%B2%84%EB%A1%9C%EB%94%A9/"},{"title":"JAVA - 11. 배열","text":"배열이란?배열은 자료형이 같은 둘 이상의 값을 저장할 수 있는 메모리 공간을 의미한다. 그리고 배열은 그 구조에 따라서 1차원 배열과 2차원 이상의 다차원 배열로 나뉜다. 1차원 배열1차원 배열은 다음과 같이 정의할 수 있다. 타입이 같은 둘 이상의 데이터를 저장할 수 있는 1차원 구조의 메모리 공간 그런데 자바는 배열도 인스턴스로 처리한다. 즉 자바에서는 배열도 인스턴스 이다. 다음 예제를 보자. 123public static void main(String[] args) { int[] ref = new int[5];//길이가 5인 int형 1차원 배열의 생성문} 위 문장에서 등호를 기준으로 왼편, 오른편에 위치한 것은 각각 참조변수의 선언과 배열의 생성이다. 물론 다음과 같이 참조변수의 선언과 배열 인스턴스의 생성을 구분할 수도 있다. 1234567891011121314public static void main(String[] args){ int[] ref; ref = new int[5]; //물론 int형 말고도 다양한 자료형으로 배열을 생성할 수 있다. double[] db = new double[5]; float[] f = new float[3]; String[] str = new String[10]; //각 배열에 대한 길이 System.out.println(db.length); System.out.println(f.length); System.out.println(str.length);} 위의 문장을 보면 각 배열의 인스턴스 변수 length에 접근하여 배열의 길이 정보를 출력하였다. 이렇듯 인스턴스 변수에 접근이 가능하다는 것은 배열이 인스턴스임을 보인는 결과이기도 하다. 배열 저장과 참조1int[] arr = new int[3]; 위 선언된 배열 arr에 첫 번째 공간에 값을 저장하는 방법은 다음과 같다. 1arr[0] = 7; 이렇듯 배열 요소의 위치를 지정하는 인덱스 값은 0에서부터 시작한다. 따라서 배열 arr의 두번째 , 새 번째 요소에 값을 저장하는 방법은 다음과 같다. 12arr[1] = 3; //2번째arr[2] = 5; //3번째 배열에 저장된 값을 참조하는 방법도 이와 유사하다. 다음은 배열 arr의 모든 요소에 저장된 값을 더하는 방법을 보여준다. 1int num = arr[0] + arr[1] + arr[2]; 배열의 생성과 초기화배열도 변수와 마찬가지로 생성과 동시에 초기화가 가능하다. 기본적인 배열의 생성 방식은 다음과 같다. 1int[] arr = new int[3]; 이 배열을 생성과 동시에 초기화하려면 초기화할 값들을 다음과 같이 중괄호를 이용해서 나열하면 된다. 1//int[] arr2 = new int[3] {1, 2, 3}; //컴파일 오류 발생 그런데 위의 문장에서는 초기화할 값들의 수를 통해 배열의 길이 정보를 계산할 수 있으므로, 이경우 배열의 길이 정보를 생략하도록 약속하였다. 즉 위의 문장은 다음과 같이 수정해야 한다. 1int[] arr2 = new int[] {1, 2 ,3}; 위의 문장을 통해 생성되는 배열의 길이는 3이다. 그리고 위의 문장은 다음과 같이 줄여서 표현할 수 도있다. 1int[] arr3 = {1, 2, 3}; 배열의 선언 두가지 방법다음과 같이 배열을 생성하는 문장에서도 이 둘은 동일한 의미로 사용이 된다. 12int[] ar1 = new int[3]; //조금 더 선호하는 방법int ar2[] = new int[3]; 배열의 참조 값과 메소드배열도 인스턴스이므로 메소드 호출 시 참조 값의 전달이 가능하다. 예를 들어 다음과 같이 배열의 참조 값을 인자로 전달할 수 있다. 12345678910111213public static void main(String[] args) { int[] arr = {1, 2, 3}; System.out.println(sumOfAry(arr));} //물론 아래 메소드처럼 메소드 생성시 배열의 참조변수를 매개변수로 선언해야 한다.static int sumOfAry(int[] arr) { int sum = 0; for(int i = 0; i&lt; arr.length; i++) { sum += arr[i]; } return sum;} 이 과정에서 배열이 새로 생성되는 것은 아니다. 그저 배열 인스턴스를 참조할 수 있는 참조 값만 인자로 전달이 되고, 이 값을 매개변수로 받을 뿐이다. 그리고 다음과 같이 배열의 참조 값을 반환하는 메소드를 정의하는 것도 가능하다. 1234static int[] reIntArr(int x) { int[] arr = new int[x]; return arr;//배열의 참조값을 반환} main 메서드의 매개변수지금까지 배열에 대해서 알아보았다. 그렇다면 main메소드의 매개변수 선언이 무엇을 의미하는지 알 수 있을 것이다. 매개변수로 String 배열의 참조변수가 선언되었다. 따라서 다음과 같이 main 메소드를 호출해야 한다. (main 메서드를 직접 호출한다는 가정하에 작성된 코드이다.) 12String[] arr = new String []{\"Coffee\", \"Milk\", \"Orange\"};main(arr); 물론 코드상에서 main메소드를 위와 같이 직접 호출하지는 않는다. 게다가 우리가 main 메소드에 전달할 String 배열을 만들지도 않는다. 그렇다면 어떻게 String 배열이 만들어지고 또 main 메소드의 인자로 전달되는 것일까? String 배열을 구성하는 것도 main 메소드를 호출하는 것도 가상머신에 의해 이뤄지는 일이다. 다만 String 배열을 구성할 문자열은 프로그램 사용자가 전달해야 한다. 예를 들어서 Simple.class 에 위치한 main 메소드를 다음과 같이 호출한다고 가정해보자. C:\\JavaStudy&gt; java Simple 그러면 String 배열이 다음과 같이 구성이 되어 main 메소드에 전달이 된다. 1String[] arr = new String[] {}; 즉 빈 String 배열이 생성되어 main 메소드의 호출이 이뤄진다. 반면 다음과 같이 실행을 하면, C:/JavaStudy&gt; java Simple Coffee Mile Orange 즉 실행 명령문에 이어서 공백을 구분 기준으로 문자열을 입력하면, 이 내용을 대상으로 String 배열이 구성되고, 이 배열의 참조 값이 전달되면서 main 메소드가 호출이 된다. 그럼 이러한 내용의 확인을 위해 다음 예제를 실행해보자. 12345public static void main(String[] args) { for(int i=0; i&lt;args.length; i++) { System.out.println(args[i]); }} Coffee, Mile, Orange가 뜨는 것을 볼 수 있을 것이다.(참고로 이클립스에선 javac , java 명령어를 알아서 처리해주기때문에 cmd를 활용하여 명령어를 직접 입력해보는 것이 좋다) 이 밖에 다차원 배열등이 있지만 설명하는 것보단 직접 해보는 것이 더 효율적인 것 같다. 배열 관련 예제코드 예제 01 예제 02 본 문서는 책의 일부 내용을 발췌한 것으로서 온오프라인 상의 무단 배포를 금합니다.","link":"/2020/04/27/java%20%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5/java11-%EB%B0%B0%EC%97%B4/"},{"title":"JAVA - 15. 상속 04","text":"Object 클래스클래스를 정의할 때 어떤 클래스도 상속하지 않으면 해당 클래스는 java.lang 패키지에 묶여 있는 Object 클래스를 상속하게 된다. 123class MyClass {...}class MyClass extends Object {...} 두 클래스의 정의는 동일하다. 물론 위의 설명에도 언급했듯이 상속하는 클래스가 있는 경우에는 Object 클래스를 상속하지 않는다. 1class MyClass extends OtherClass {...} 그러나 이 경우에도 OtherClass 또는 OtherClass가 상속하는 클래스가 Object 클래스를 상속한다. 결국 자바의 모든 클래스는 Object 클래스를 직접 혹은 간접적으로 상속하게 되어있다. 그렇다면 자바의 모든 클래스는 Object 클래스를 상속하도록 한 이유는 무엇일까? 이는 자바의 모든 인스턴스에 공통된 기준 및 규약을 적용하기 위함이다. 한 예로 자바의 모든 인스턴스는 다음 메소드의 인자로 전달될 수 있다. 1public void println(Object x) // System.out.println 메소드 위 메소드의 매개변수 형이 Object이다. 따라서 자바의 모든 인스턴스는 위 메소드의 인자가 될 수 있다. 그리고 위의 메소드는 인자로 전달된 인스턴스의 다음 메소드를 호출한다. 이 메소드는 Object 클래스에 정의되어 있는 메소드이므로 모든 인스턴스를 대상으로 호출이 가능하다. 이 블로그엔 포스팅하지 않았지만 글쓴이의 github 에 String 클래스 예제에 대해 다루었다.(목차에서 String 클래스 부분의 글들을 찾아보면 된다) 이 예제에서 클래스를 정의하면서 toString 메소드를 정의한 바 있다. 그런데 사실 이것은 Object 클래스의 toString 메소드를 오버라이딩 한 것 이다. 이와 관련해서 다음 예제를 살펴보자. 123456789101112131415161718192021222324252627282930class Bread{ //오브젝트 클래스의 toString 메소드를 오버라이딩 public String toString() { System.out.println(super.toString()); return \"My Bread\"; }}class CreamBread extends Bread{ //Bread 클래스의 toString 메소드를 오버라이딩 public String toString() { return \"my CreamBread\"; }}public class OverridingToString { public static void main(String[] args) { Bread b1 = new Bread(); Bread b2 = new CreamBread(); //b1이 참조하는 인스턴스의 toString 메소드 호출로 이어짐 System.out.println(b1); //b2가 참조하는 인스턴스의 toString 메소드 호출로 이어짐 System.out.println(b2); }} 클래스와 메소드의 final 선언클래스를 정의하는데 있어서 해당 클래스를 다른 클래스가 상속하는 것을 원치 않는다면, 다음과 같이 final 선언을 추가하면 된다. 1public final class MyClass{...} //MyClass 는 다른 클래스가 상속 할 수 없음 대표적인 final 클래스로 String 클래스가 있다. 따라서 우리는 String 클래스를 상속할 수 없다. 또한 다음과 같이 메소드의 정의에 final 선언을 추가하여 해당 메소드의 오버라이딩을 허용하지 않을 수 도 있다. 1public final void func(){...} @Override자바 5에서 ‘어노테이션(Annotations)’이라는 것이 소개되었다. 그리고 이와 관련하여 이후에 별도로 설명을 하겠다. 그러나 상속, 정확히는 메소드 오버라이딩과 관련 있는 내용이 있어 이에 대한 부분만 먼저 소개하고자 한다. 다음 예제를 보자. 이 예제는 컴파일도 되고 실행도 잘 된다. 그러나 프로그래머의 실수가 일부 포함되어 있다. 그 실수가 무엇인지찾아보자. 123456789101112131415161718192021class ParentAdder{ public int add(int a, int b) { return a + b; }}class ChildAdder extends ParentAdder{ // 상위 클래스의 add를 오버라이딩 하려고 합니다. public double add(double a, double b) { return a + b; }}public class OverrideMistake { public static void main(String[] args) { ParentAdder adder = new ChildAdder(); System.out.println(adder.add(3, 4)); }} 클래스 ChildAdder 는 ParentAdder를 상속한다. 그리고 ParentAdder의 add를 오버라이딩 할 의도였음을 주석을 통해 알 수 있다. 그러나 부모 메소드와 매개변수 타입과 반환형이 달랐기 때문이다. 이러한 유형의 실수는 매우 흔하다. 그럼에도 불구하고 발견이 쉽지 않기 때문에 치명적인 실수가 될 수 있다. 제일 좋은 것은 컴파일 과정에서 실수가 확인되는 것이다. 그러나 이 경우 문법적으로는 오류가 없기 때문에 컴파일도 되고 실행도 된다. 이러한 상황을 방지하기 위해서 ‘어노테이션’ 이라는 것을 사용할 수 있다. 어노테이션은 일종의 메모이다. 그것도 ‘자바 컴파일러에게 메시지를 전달하는 목적의 메모’이다. ChildAdder 클래스를 설계하는 과정에서 add 메소드가 ParentAdder의 add 메소드를 오버라이딩 할 의도였다면 다음과 같이 메모를 달아준다. 12345678class ChildAdder extends ParentAdder{ // 상위 클래스의 add를 오버라이딩 하려고 합니다. @Override public double add(double a, double b) { return a + b; }} 위와같이 어노테이션을 정의하면 컴파일러는 오버라이딩이 제대로 되었는지 확인을 하고, 프로그래머의 의도대로 오버라이딩이 되지 않았다면 컴파일 단계에서 에러를 전달해준다. 메소드를 오버라이딩 해야 한다면, 이렇듯 어노테이션을 사용하여 컴파일 과정에서 확인되지 않는 오류의 발생을 차단하는 것이 좋다. 본 문서는 책의 일부 내용을 발췌한 것으로서 온오프라인 상의 무단 배포를 금합니다.","link":"/2020/04/27/java%20%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5/java15-%EC%83%81%EC%86%8D04/"},{"title":"JAVA - 13. 상속 02","text":"상위 클래스의 참조변수가 참조할 수 있는 대상의 범위이전 상속의 IS - A 예제 에서 SmartPhone 클래스가 MobilePhone 클래스를 상속하는 형태로 클래스를 디자인한 바 있다. 1class Sartphone extends MobilePhone {...} 따라서 다음과 같이 문장을 구성할 수 있다. 1SmartPhone phone = new SmartPhone(\"010-555-777\", \"Nougat\"); 그런데 다음과 같이 MobilePhone형 참조변수가 SmartPhone 인스턴스를 참조하게 할 수도 있다. 1MobilePhone phone = new SmartPhone(\"010-555-777\", \"Nougat\"); 이렇듯 상위 클래스의 참조변수는 하위 클래스의 인스턴스를 참조할 수 있는데, 이 부분을 다음과 같이 이해하자. 모바일폰을 상속하는 스마트폰도 일종의 모바일폰이다. Mobilephone을 상속하는 SmartPhone 인스턴스는 MobilePhone 인스턴스이기도 하다. 따라서 MobilePhone형 참조변수는 SmartPhone 인스턴스를 참조할 수 있다. 다음과 같이 상속 관계가 형성이 되면, 1class Sartphone extends MobilePhone {...} 다음 인스턴스는 Smartphone 인스턴스인 동시에 MobilePhone 인스턴스가 된다.(이는 스마트폰을 가리키며 모바일폰이다. 라고 말할 수 있는 것과 이치가 같다.) 12new SmartPhone(\"010-555-666\",\"Nougat\");//스마트폰 인스턴스이면서 동시에 모바일폰 인스턴스 따라서 위에 말한것처럼 12SmartPhone phone = new SmartPhone(\"010-555-777\", \"Nougat\");MobilePhone phone = new SmartPhone(\"010-555-777\", \"Nougat\"); SmartPhone 인스턴스를 참조하는 변수를 선언하는 두 가지 방법이 가능하다. 지금까지 설명한 것을 예제를 통해 알아보자123456789101112131415161718192021222324252627282930313233343536373839404142//Overriding_Exam01.class class MobilePhone{ protected String number;// 전화번호 public MobilePhone(String number) { this.number = number; } public void answers() { System.out.println(\"Hi ~ from \" + number); }}//모바일폰을 상속받는 하위클래스 스마트폰class SmartPhone extends MobilePhone{ private String androidVer;// 안드로이드 운영체제 네임(버전) public SmartPhone(String number, String ver) { super(number); this.androidVer = ver; } public void playApp() { System.out.println(\"App is running in \" + androidVer); }}class Overriding_Exam01{ public static void main(String[] args) { SmartPhone ph1 = new SmartPhone(\"010-111-222\", \"Andro01\"); MobilePhone ph2 = new SmartPhone(\"010-444-333\", \"Andro02\"); ph1.answers(); ph1.playApp(); ph2.answers(); //ph2.playApp(); }} 위 예제에서는 다음과 같이 인스턴스를 생성하였다. 1MobilePhone phone = new SmartPhone(\"010-555-777\", \"Nougat\"); 그리고 다음과 같이 mobilePhone 클래스에 정의된 메소드를 호출하는데 이는 당연히 가능한 일이다. 1ph2.answer(); 그러나 다음과 같이 SmartPhone 클래스에 정의된 메소드의 호출은 불가능하다. 참조변수 ph2가 실제 참조 하는 인스턴스가 SmartPhone 인스턴스이지만 불가능하다. 1ph2.playApp(); // 스마트폰 클래스에서 정의한 메소드 참조변수 ph2는 MobilePhone형 참조변수이다. 이러한 경우 ph2를 통해서 접근이 가능한 멤버는 MobilePhone 클래스에 정의되었거나 이 클래스가 상속하는 클래스의 멤버로 제한된다.(ph2가 참조하는 인스턴스가 무엇인지는 상관이 없다) 지금 설명한 이 내용이 비합리적이라고 생각할 수 있다. 참조변수의 형에 상관없이, 참조하는 인스턴스에 따라서 접근가능한 멤버가 결정되어야 한다고 생각할 수 있다. 그러나 그렇게 설계하지 않은 이유가 두 가지 있는데 그중 하나는 다음과 같다. 실행 시간을 늦추는 결과로 이어질 수 있습니다 자바는 메소드 호출 시 참조변수의 형을 참조 하여 그 메소드 호출이 옳은 것인지 판단한다.예를 들면 다음과 같다.(다음과 같이 컴파일러가 판단하고 컴파일을 한다) 12ph2.answer();//ph2가 MobilePhone형이므로 MobilePhone 클래스의 메소드 answer은 호출가능하다. 이러한 형태의 판단은 그 속도가 빠르다.(컴파일 단계에서 쉽게 판단 가능하다) 그러나 실제 참조하는 인스턴스를 대상으로 메소드의 호출 가능성을 판단하는 일은 간단하지 않다. 참조하는 인스턴스의 종류는 코드의 흐름에 따라 얼마든지 달라질 수 있기 때문이다. 그런데 이러한 단점도 감수할 만한 가치가 있다면 감수했을 것이다. 그러나 이어서 언급하는 두 번째 이유는 이러한 단점을 감수할 필요가 없다는 결론을 내리게 한다. 참조변수의 타입을 기준으로 접근 가능한 멤버를 제한하는 것은 코드를 단순하게 한다. 단점이 많은 일부 기능을 제한함으로써 단순하고 명료한 코드의 작성을 유도하는 언어가 좋은 언어이다. 그런 측면에서 참조변수의 타입을 기준으로 접근 가능한 멤버를 제한한 것은 의미가 있는 일이다. 클래스의 상속과 참조변수의 참조 가능성다음과 같이 상속 관계를 맺은 세 클래스가 존재한다고 가정하자. 1234567891011class Cake{ public void sweet(){...}}class CheeseCake extends Cake{ public void milky(){...}}class StrawberryCheeseCake extends CheeseCake{ public void sour(){...}} 이때 StrawberryCheeseCake 인스턴스는 다음과 같이 말할 수 있다. - _StrawberryCheeseCake 인스턴스는 CheeseCake 인스턴스이면서 Cake 인스턴스 이다._ 따라서 다음과 같이 인스턴스를 참조할 수 있다. 12Cake cake1 = new StrawberryCheeseCake();CheeseCake cake2 = new StrawberryCheeseCake(); 그러나 Cake형 참조변수 cake1을 통해서 호출할 수 있는 메소드는 다음 한 가지이다. 12cake1.sweet();//Cake에 정의된 메소드 호출 그리고 CheeseCake형 참조변수 cake2를 통해서 호출할 수 있는 메소드는 다음 두 가지이다. 1234cake2.sweet();//Cake에 정의된 메소드 호출cake2.milky();//CheeseCake에 정의된 메소드 호출 이렇듯 참조변수가 참조하는 인스턴스의 종류에 상관없이, 참조변수의 타입에 해당하는 클래스와 그 클래스가 상속하는 상위 클래스에 정의된 메소드들만 호출이 가능하다. 본 문서는 책의 일부 내용을 발췌한 것으로서 온오프라인 상의 무단 배포를 금합니다.","link":"/2020/04/27/java%20%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5/java13-%EC%83%81%EC%86%8D02/"},{"title":"JAVA - 12. 상속 01","text":"상속의 기본문법 이해상속의 적절한 활용 방법은 한두 문자응로 가볍게 설명할 수 있는 내용이 아니다. 그리고 이에 대한 설명을 듣기에 앞서 상옥에 대한 문법적인 이해가 선행되어야 한다. 상속이란?상속의 이유와 목적을 물어보면 상속은 코드의 재활용를 위한 문법입니다. 그러나 이는 정확한 표현은 아니다. 연관된 일련의 클래스들에 대해 공통적인 규약을 정의할 수 있다. 위의 답변은 매우 모범적인 답변이다. 상속의 가장 기본적인 특성상속을 단순하게 설명하면 , 기존에 정의된 클래스에 메소드와 변수를 추가하여 새로운 클래스를 정의하는 것이 상속이다. 예를 들어서 다음의 클래스가 정의되어 있다고 가정해보자. 1234567891011class Animal{ String name; Animal(String name){ this.name = name; } public void name() { System.out.println(\"이 동물의 이름은 \"+name+\"입니다.\"); }} 이때 위의 클래스를 상속하여 다음과 같이 새로운 클래스를 정의 할 수 있다. 12345678910111213class Cat extends Animal{ String cry; Cat(String name , String cry){ super(name);//부모의 String타입의 매개변수를 받는 생성자 호출(super는 이후에 배우게 된다.) this.cry = cry; } public void info() { name();//Animal 클래스를 상속했기 때문에 호출 가능 System.out.println(\"울음소리는 \"+cry); }} 위 예제를 보면 새로운 super 키워드가 등장한 것을 알 수 있다. 이건 나중에 더 자세히 다루어보겠다. 클래스 변수와 클래스 메소드의 상속이 가능한가?static 선언이 붙는 클래스 변수와 클래스 메소드도 상속의 대상에 포함이 되겠는가? static 선언이 갖는 의미를 떠올리고 논리적으로 접근을 하면 이 질문에 스스로 답을 할 수 있다. 앞서 공부한 클래스 변수와 클래스 메소드의 특징을 정리하면 다음과 같다. 인스턴스의 생성과 상관없이 접근이 가능하다. 클래스 내부와 외부에서 접근이 가능하다. 클래스 변수와 클래스 메소드가 위치한 클래스 내에서는 직접 접근이 가능하다. 즉 클래스 변수와 클래스 메소드는 인스턴스에 속하지 않는, 딱 하나만 존재하는 변수와 메소드이다. 따라서 상속의 대상이 아니다. 그렇다면 다음 내용에 대해서는 생각을 해볼 필요가 있다. 상위 클래스에 위치한 클래스 변수와 메소드에 하위 클래스에서 어떻게 접근하는가? 결론을 말하자면 변수의 이름만으로 접근이 가능하다. 단 접근 수준 지시자가 접근을 허용해야 접근이 가능하다. 다음 예제를 통해 알아보자. 123456789101112131415161718192021222324public class Example{ public static void main(String[] args) { SuperClass sc1 = new SuperClass(); // 값 1 증가 SuperClass sc2 = new SuperClass(); // 값 1 증가 SubClass sub1 = new SubClass();//인스턴스 생성 과정에서 부모생성자가 호출 되므로 count 값 1 증가 sub1.showCount(); }}class SuperClass{ protected static int count = 0; //protected는 하위 클래스 접근을 허용 public SuperClass() { count++; }}class SubClass extends SuperClass{ public void showCount() { System.out.println(count); }} 위의 예제에서 변수 count의 접근 수준 지시자를 private으로 선언하면 이로 인해 컴파일 오류가 발생하는 것도 확인하기 바란다. IS - A두 클래스를 상속의 관계로 맺는 것이 도움이 되는 상황이 있고 도움이 되지 않는 상황이 있다. 그렇다면 언제 두 클래스를 상속의 관계로 맺어야 할까? 기본적으로 IS-A 관계라는 것이 성립해야 상속의 후보로 고려할 수 있다. 상속이 갖는 문법적 특성을 통해서 상위 클래스와 하위 클래스를 다음과 같이 이야기할 수 있다. 하위 클래스는 상위 클래스의 모든 특성을 지닌다. 거기에 더하여 하위 클래스는 자신만의 추가적인 특성을 더하게 된다. 이러한 상속의 특성을 현실 세계에서도 찾아볼 수 있다. 대표적인 예가 다음과 같다. 모바일폰 vs 스마트폰 모바일폰이 상위 클래스라면 스마트폰은 하위 클래스이다. 즉 이 둘을 객체지향의 관점에서 보면 다음과 같이 이야기할 수 있다. 모바일폰을 스마트폰이 상속한다. 스마트폰은 모바일폰이 갖는 특성을 모두 갖는다. 게다가 스마트폰은 앱의 설치 및 실행 등 컴퓨터의 특성을 추가적으로 갖고 있다. 따라서 클래스를 설계한다면 다음과 같은 설계가 논리적으로 타당하다. class 스마트폰 extends 모바일폰 {…} 그런데 우리는 스마트폰도 모바일폰의 한 종류라 말한다. 즉 컴퓨터의 기능이 추가된 모바일폰이 스마트 폰인 것이다. 따라서 다음과 같이 이야기할 수 있다. 스마트폰도 모바일폰이다. 스마트폰은 일종의 모바일폰이다. 그리고 위의 문장들이 나타나는 관계를 가리켜 IS-A 관계라 하고, 이것이 상속의 관계를 맺기 위한 두 클래스의 기본 조건이 된다. 참고로 is a는 ~은 ~ 이다. 로해석 된다. 예를 들면 다음과 같다. Life is a journey - 인생은 여행이다. 지금까지 설명한 내용을 정리하면 다음과 같다. IS-A 관계 총 정리 IS - A 관계는 ~은 ~이다. 로 표현되는 관계이다. 상속이 갖는 문법적 특성은 IS - A 관계의 표현에 적합하다. 따라서 상속 관계를 형성하기 위한 두 클래스는 IS -A 관계에 있어야 한다. IS-A 관계 예제관련된 예제를 github에 올려두었다. IS - A 예제 본 문서는 책의 일부 내용을 발췌한 것으로서 온오프라인 상의 무단 배포를 금합니다.","link":"/2020/04/27/java%20%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5/java12-%EC%83%81%EC%86%8D01/"},{"title":"JAVA - 14. 상속 03","text":"메소드 오버라이딩(Method Overriding)이란?상위 클래스에 정의된 메소드를 하위 클래스에서 다시 정의하는 행위를 가리켜 ‘메소드 오버라이딩’ 이라 하는데, 여기서 말하는 오버라이딩은 ‘무효화 시키다’의 뜻으로 해석이 된다. 다음 예제를 통해 메소드 오버라이딩의 결과를 확인해보자. 123456789101112131415161718192021class Cake{ public void yummy() { System.out.println(\"Yummy Cake\"); }}class CheeseCake extends Cake{ public void yummy() {// Cake의 Yummy 메소드를 오버라이딩 함 System.out.println(\"Yummy Cheese Cake\"); }}public class YummyCakeOverriding { public static void main(String[] args) { Cake c1 = new CheeseCake(); CheeseCake c2 = new CheeseCake(); c1.yummy(); //오버라이딩 한 CheeseCake의 Yummy 메소드가 호출됨 c2.yummy(); //오버라이딩 한 CheeseCake의 Yummy 메소드가 호출됨 }} 실행 결과 : Yummy Cheese Cake가 두번 출력 되는 것을 알 수 있다. 위의 CheeseCake 클래스는 Cake를 상속하면서, Cake에 정의된 yummy메소드와 다음 세 가지가 같은 메소드를 정의하였다. 메소드의 이름 메소드의 반환형 메소드의 매개변수 선언 위의 세가지가 같아야 메소드 오버라이딩이 성립한다. 즉 Cake의 yummy 메소드를 CheeseCake의 Yummy 메소드가 오버라이딩 하였다. 그리고 오버라이딩을 하면, 참조변수의 형에 상관없이 오버라이딩 한 메소드가 오버라이딩된 메소드를 대신하게 된다. 위의 예제의 main 메소드에서 다음과 같이 Cake 형 참조변수로 CheeseCake 인스턴스를 참조하였다. 1Cake c1 = new CheeseCake(); 그리고 다음과 같이 yummy 메소드를 호출하였다. 1c1.yummy(); 앞서 설명한 바에 의하면 c1은 Cake형 참조변수이니, 위 문장의 경우 Cake의 yummy 메소드가 호출되어야 한다. CheeseCake 인스턴스를 참조하고 있는 상황이라도 말이다. 그러나 Cake의 yummy 메소드는 오버라이딩 되었다(무효화 되었다). 따라서 이 경우에는 CheeseCake의 yummy 메소드가 대신 호출이 된다. 메소드 오버라이딩의 일반화앞서 설명한 메소드 오버라이딩을 문법적으로 정리하기 위해서 클래스를 다음과 같이 정의하였다. 123456789class Cake{ public void yummy(){...}}class CheeseCake extends Cake{ public void yummy(){...}}class StrawberryCheeseCake extends CheeseCake{ public void yummy(){...}} 위와 같이 클래스를 정의한 경우 CheeseCake의 참조변수와 인스턴스의 생성문을 다음과 같이 구성할 수 있다. 123Cake c1 = new StrawberryCheeseCake();CheeseCake c2 = new StrawberryCheeseCake();StrawberryCheeseCake c3 = new StrawberryCheeseCake(); 그리고 다음 세 문장이 실행되었을 때 호출되는 메소드는 StrawberryCheeseCake의 yummy 메소드이다. 123c1.yummy(); //StrawberryCheeseCake의 yummy 메소드 호출c2.yummy(); //StrawberryCheeseCake의 yummy 메소드 호출c3.yummy(); //StrawberryCheeseCake의 yummy 메소드 호출 오버라이딩된 메소드를 호출하는 방법위의 예제들에서도 알 수 있듯이 Cake, CheeseCake에 정의된 yummy 메소드들을 위의 방법처럼 호출하는 것은 불가능하다. 하지만 클래스 외부가 아닌 내부에서 Cake의 yummy 메소드를 호출하는 방법은 있다. 다음 예제를 살펴보자. 12345678910111213141516171819202122package ch11_상속;//오버라이딩 된 메소드를 호출하는 방법 예제class Cake{ public void yummy() { System.out.println(\"Yummy Cake\"); }}class CheeseCake extends Cake{ public void yummy() { super.yummy(); System.out.println(\"Yummy CheeseCake\"); }}public class YummyCakeSuper { public static void main(String[] args) { CheeseCake cake = new CheeseCake(); cake.yummy(); }} 지금까지는 상위 클래스의 생성자를 호출할 목적으로 키워드 super를 사용하였다. 그런데 위의 예제에서 보이듯이 상위 클래스에 정의된, 오버라이딩 된 메소드의 호출을 목적으로도 super가 사용될 수 있다. 본 문서는 책의 일부 내용을 발췌한 것으로서 온오프라인 상의 무단 배포를 금합니다.","link":"/2020/04/27/java%20%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5/java14-%EC%83%81%EC%86%8D03/"},{"title":"JAVA - 16. 인터페이스","text":"인터페이스란?123interface ExampleIF{ public void exam();} 위의 예제는 인터페이스 선언의 모습이다. 기본 골격은 클래스와 동일하다. 그러나 class 대신 interface라는 키워드를 사용하고, 내부에 있는 메소드는 몸체 없이 세미콜론으로 마무리 된다. 위와 같이 몸체가 비어있는 메소드를 가리켜 추상 메소드(Abstract Methods) 라 한다. 그리고 인터페이스를 대상으로 인스턴스 생성이 불가능하다. 다른 클래스에 의해 상속이 되어 사용될 뿐이다. 1class ExampleClass implements ExampleIF{...} 클래스가 인터페이스를 상속하는 행위는 상속 이 아닌 구현(Implementation) 이라 한다. 문법 관계는 상속과 동일하지만 본질은 구현이기 때문이다. 위의 예제에 클래스에서 인터페이스를 상속할때 extends 라는 키워드 대신 implements가 사용되어진 것을 볼 수 있다. 인터페이스의 특징클래스의 인터페이스 구현을 조금 더 구체적으로 보자면 다음과 같은 특징이 있다. 구현할 인터페이스를 명시할 때 키워드 implements를 사용한다. 한 클래스는 둘 이상의 인터페이스를 동시에 구현할 수 있다. 상속과 구현은 동시에 가능하다. 인터페이스의 형(타입)을 대상으로 참조변수의 선언이 가능하다. 인터페이스의 추상 메소드와 이를 구현하는 메소드 사이에 오버라이딩 관계가 성립한다. implements를 사용하는 것은 위의 예제에서 알 수 있고, 다수의 인터페이스를 상속한다는 것은 다음과 같다. 1class ExampleClass implements ExampleIF01, ExampleIF02{...} 상속과 구현이 동시에 가능하다는 말은 이전까지 상속에 대하여 포스팅하였는데, 하위 클래스가 상위 클래스를 상속하는 행위와 인터페이스를 구현하는 행위를 동시에 할 수 있다는 뜻이다. 1class ExampleClass extends ExampleSuperClass implements ExampleIF01, ExampleIF02{...} 그 이후의 특징들은 말이 조금 어렵게 느껴질 수도 있다. 먼저 인터페이스의 타입을 대상으로 참조변수의 선언이 가능하다는 말은 상속에서도 비슷한 예제를 다루었는데 12345678class ExampleClass extends SuperExampleClass{...}public class Test{ public static void main(String[] args){ ExampleClass object1 = new ExampleClass(); SuperExampleClass object2 = new ExampleClass(); }} 위와 같이 ExampleClass 의 인스턴스를 생성하고 참조변수에 할당하려고한다. 그렇다면 참조변수의 타입은 ExampleClass의 인스턴스(객체) 이기때문에 당연히 ExampleClass가 될 것 이다. 그리고 ExampleClass가 상속한 SuperExampleClass도 ExampleClass의 부모클래스이기때문에 ExampleClass의 참조변수 타입으로써 인스턴스 할당이 가능 한 것이다. (물론 자식 클래스에서 새로 구현된 메소드는 부모클래스 형인 참조변수에서는 사용할 수 없다) 본론으로 돌아와 인터페이스를 대상으로 참조변수의 선언이 가능하다는것은 다음과 같다. 1234567class ExampleClass implements ExampleIF{...}public class Test{ public static void main(String[] args){ ExampleIF obj = new ExampleClass(); }} 위의 상속클래스의 참조변수 선언 예제와 비슷하다. 구현한 ExampleIF 인터페이스 역시 ExampleClass 클래스의 인스턴트를 할당할 수 있는 참조변수가 된다는 것 이다. 그렇다면 자연스럽게 ‘인터페이스의 추상 메소드와 이를 구현하는 메소드 사이에 오버라이딩 관계가 성립한다’ 라는 것도 단순하게 생각하면 된다. 인터페이스의 구현되지않은 추상메소드 역시 메소드임으로, 이를 상속하는 인터페이스의 메소드를 재정의(오버라이딩)해주어야 한다. 이는 선택사항이 아닌 강제성이 부여된다. 인터페이스의 본질적 의미인터페이스의 사전적 의미는 연결점 또는 접점으로 둘 사이를 연결하는 매개체를 뜻한다. 실제로 자바의 인터페이스는 그런 역할을 한다. 그럼 이와 관련하여 간단한 예를 하나 들겠다. 몬스터의 종류는 다양하다. 몬스터는 이름과 각자의 특성이 있다. 이중 슬라임과 스켈레톤을 몬스터의 한 예로 볼 수 있다. 이렇듯 몬스터와 슬라임, 스켈레톤 등이 연결되는 한 예를 보았다. 그렇다면 이것을 코드로 구현해보자. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849interface Monster{ public void name();//이름 public void characteristic();//특성}class Slime implements Monster{ @Override public void name() { System.out.println(\"슬라임\"); } @Override public void characteristic() { System.out.println(\"몸이 액체로 되어있음\"); } }class Skeleton implements Monster{ @Override public void name() { System.out.println(\"스켈레톤\"); } @Override public void characteristic() { System.out.println(\"뼈만 앙상한 언데드 몬스터\"); }}public class Example { public static void main(String[] args) { Monster slime = new Slime(); slime.name(); slime.characteristic(); System.out.println(); Monster skeleton = new Skeleton(); skeleton.name(); skeleton.characteristic(); }} 위의 코드는 몬스터들이 가지고있는 기본적인 속성들을 인터페이스에 추상메소드를 만들어놓고 각 Slime과 Skeleton 클래스들이 이것을 구현한 예제이다. Slime과 Skeleton은 대부분의 RPG 게임에서 많이 다루는 괴물들이기때문에 Monster라는 접점이 있다. 인터페이스의 문법 구성인터페이스에 존재할 수 있는 메소드에는 추상 메소드, 디폴트 메소드, static 메소드가 있다. 그리고 인터페이스 간 상속도 가능하며 인터페이스의 타입 이름을 대상으로 instance of 연산을 할 수도 있다. 즉 많은 특성이 클래스와 유사하다. 위의 예제에서 다음같이 인터페이스를 정의하였다. 123456interface Monster{ public void name();//추상 메소드 public void characteristic();//추상 메소드} 그리고 위 인터페이스에 정의된 추상 메소드에는 다음의 특징이 있다. 인터페이스의 모든 메소드는 public 선언된 것으로 간주합니다. 즉 인터페이스 내에 위치하는 메소드는 별도의 선언이 없어도 public이 된다. 때문에 위의 인터페이스 정의에서 메소드 앞에 public을 붙일 필요가 없다. 그리고 인터페이스에서도 변수를 선언할 수 있다. 1234interface Monster{ int DEFAULT_HP = 100; int DEFAULT_PAWER = 10;} 그리고 이렇게 인터페이스 내에 선언되는 변수에는 다음의 특징이 있다. 반드시 선언과 동시에 값으로 초기화를 해야 한다. 모든 변수는 public, static, final 이 선언된 것으로 간주한다. 결론적으로 인터페이스 내에 선언된 변수는 상수이다. 인터페이스 간 상속위에 다루었던 몬스터 인터페이스를 통해 구현된 몬스터들이 있다. 하지만 설계를 하던중 보스몬스터급인 녀석들은 차별을 두려고 한다. 하지만 몬스터 인터페이스에 메소드를 만들게 되면 구현하는 클래스에서는 이것이 강제가 되기때문에 모든 몬스터에게 불필요한 보스몬스터의 기능을 담은 메소드를 강제구현시켜야한다. 그렇다고 보스몬스터가 몬스터와 다른것은 아니다. 공통되는 부분도 존재하기 때문이다. 이런 경우 우리는 인터페이스간의 상속을통해서 문제를 해결할 수 있다. 글로만 이해하기 어려우니 예제를 보자. 12345678910111213141516171819202122232425262728293031323334353637interface Monster{ public void name();//이름 public void characteristic();//특성}interface BossMonster extends Monster{ void BossSkill(); void BossItem();}class Minotaur implements BossMonster{ @Override public void name() { System.out.println(\"미노타우르스\"); } @Override public void characteristic() { System.out.println(\"소 머리에 인간의 몸을 한 거대한 몬스터\"); } @Override public void BossSkill() { System.out.println(\"보스 몬스터 한정 기술\"); } @Override public void BossItem() { System.out.println(\"보스 몬스터 한정 아이템\"); } } 이전의 Monster 인터페이스는 수정하지 않고, 새로운 BossMonster 인터페이스를 만들었다. 그리고 이전의 Monster 인터페이스를 상속하여 Monster의 기본적인 기능들은 가져오고 보스몬스터만의 새로운 기능이 추가가 된 것을 알 수 있다. 이것은 이전에 만들었던 슬라임과 스켈레톤의 코드는 수정할 필요없이 앞으로 추가될 보스몬스터만 BossMonster 인터페이스를 구현할 수 있다는 이점이 있다. 그리고 위의 인터페이스간 상속을 명시할때 extends 키워드를 사용하는데 이에 대한 내용을 정리하자면 다음과 같다. 두 클래스 사이의 상속은 extends로 명시한다. 두 인터페이스 사이의 상속도 extneds 로 명시한다. 인터페이스와 클래스 사이의 구현만 implements로 명시한다. 본 문서는 책의 일부 내용을 발췌한 것으로서 온오프라인 상의 무단 배포를 금합니다.","link":"/2020/04/29/java%20%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5/java16-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4/"},{"title":"JAVA - 17. 객체지향","text":"객체지향 프로그래밍(Object Oriented Programming )이란?객체지향은 프로그램 설계방법론중 하나 이다. 프로그램을 수많은 ‘객체’라는 기본 단위로 나누고 이 객체들의 상호작용으로 서술하는 방식이다. 객체란 하나의 역할을 수행하는 ‘메소드와 변수(데이터)’의 묶음으로 봐야 한다. 어느 유튜버의 강의을 보다가 가장 마음에 와닿았던 맨트가 있었다. 철학자 플라톤의 이데아 론을 객체지향(OOP)과 빗대어 설명한 부분이다. “목수의 머릿속엔 가장 이상적이고 완벽한 책상이 하나 존재한다. 목수가 현실에 책상을 만들때는 그 이상적인 세계에 존재하는 책상을 본따서 만든다고 한다. 즉 현실의 책상은 목수의 머릿속에 있는 책상의 이상적인 설계도를 본따서 만든다고 생각할 수 있다. 플라톤은 이 이상적인 세계를 이데아라고 불렀다. 그리고 현실에 존재하는 물건은 그 이상적인 세계에 있는 물건을 가져와 복제한 레플리카라고 했다.“ 갑자기 철학적인 이야기가 나와 이상하다고 생각할 수 있지만, 우리가 프로그래밍에 사용하는 class, object 들은 실제로 고대 그리스 플라톤의 이데아론에서 왔다. 1class Dog{...} 우리는 위와 같이 클래스를 정의하고 사용해왔다. 하지만 위의 클래스는 단지 정의 되어져 있을 뿐 사용된 것은 아니다. 이것은 우리가 머릿속에서 생각하는 이상적인 설계도일 뿐이다. 1234567public static void main(String[] args){ Dog backgoo = new Dog(); Dog rudy = new Dog(); Dog jack = new Dog();} 위와같이 머릿속의 개라는 이미지를 현실에 만들었을때(인스턴스화), 비로소 이것은 객체로써 존재하게 되는 것 이다. 우리는 이것을 머리에 암기하는 것이 아니라, 자연스러운 흐름대로 이해할 필요가 있다. 이제 객체지향의 특징들에 대해서 알아보자. 객체지향의 특징 추상화 캡슐화 상속 다형성 추상화추상화에 사전적 정의는 다음과 같다. 추상(抽象)은 사물을 정확하게 이해하기 위해서는 사물이 지니고 있는 여러 가지 측면 가운데서 특정한 측면만을 가려내어 포착하는 것이다. 어떤 일면만을 추상하는 것은 다른 측면을 버린다는 것과 같다. 이것을 ‘사상(捨象)’이라 한다. 추상화에 대한내용은 생각하기에 따라 다르기도하고 설명이 너무 난잡해질 수 도 있는 것 같다. 정말 간단하게 생각하자면, 자바에서 추상화란 공통된 속성(변수)과 행위(메소드)를 모아서 클래스를 만드는 것이다. 캡슐화객체지향에서 캡슐화란 두가지 특징이 있다. 객체의 속성(맴버변수, data fields)과 행위(메서드, methods)를 하나로 묶는다. 실제 구현 내용 일부를 외부에 감추어 은닉한다. 외부에 감추는 방법으로는 언어적 측면으로 접근제한자를 두어 은닉의 정도를 기술하여 구현한다. 이것이 캡슐화에서 중요한 정보은닉이다. 정보은닉 개념정보은닉이란 캡슐화된 객체의 내부구현을 외부로부터 숨기는 것이다. 이전 포스트에서도 다루었는데, 자바에서 정보란 클래스의 인스턴스변수(맴버변수, 필드, 속성 등)를 말한다. 보통 이러한 정보들은 접근제한자를 두어 외부에서 직접 접근하지 못하게 하고 메소드를 통해서만 변수에 접근할 수 있게 하는 방식을 많이 사용한다. 1234567891011class Person{ String name; void setName(String name){ this.name = name; } String getName(){ return name; }} 위의 클래스 Person은 사람의 기본적인 특징 ‘이름을 가지고있다’ 를 반영한 클래스이다. 이를 인스턴스화하여 다음과 같이 사용할 수 있다. 12345public static void main(String[] args){ Person jaebeom = new Person(); jaebeom.setName(\"고재범\"); System.out.println(jaebeom.getName());} 위의 예제는 작성자인 본인이 만든 클래스이다. 이것을 만든 의도는 본인이 가장 잘 이해하고있다.(잘 만들었던 못 만들었던 만든사람의 의도가 명확하다) 그리고 작성자는 맴버변수인 name에 값을 바로 대입하지 않고 메소드를 통해서 값을 할당하고 사용되길 원한다. 하지만 위의 예제의 경우에 접근지시자(접근제한자)를 사용하지 않았다. 그로 인하여 다른 사용자가 잘못 사용하게되는 예를 보자. 12345public static void main(String[] args){ Person jade = new Person(); jade.name = \"고재범\"; System.out.println(jade.name);} Person 클래스의 맴버변수에 바로 접근하여 값을 할당하고 출력하는 모습을 볼 수 있다. 이는 작성자의 의도와 다르게 잘못된 방향으로 사용이 되고있다. 위의 경우 치명적인 문제가 생길 일은 없지만, 맴버변수 name을 위해 정의한 setName, getName 메소드가 불필요하게 되어버렸다. 이렇게 작성자의 의도와는 반대로 사용이 되어지는 것을 막기위해 우리는 정보를 은닉할 필요가 있다. 사실 위의 예제로는 정보은닉의 필요성을 못 느낄 수 도 있다. 그렇다면 내용을 추가해보자. 12345678910111213141516class Person{ String name; double weight; void setWeight(double weight){ if(weight &lt;= 0){ System.out.println(\"몸무게는 0보다 작거나 같을 수 없습니다! 다시 입력해주세요\"); return; } this.weight = weight; } double getWeight(){ return weight; }} Person 클래스에 몸무게라는 속성을 추가하였다. 그리고 setWeight 메소드를 보면 몸무게는 0키로그램보다 작거나 같을 수 없기 때문에 예외적인 부분을 처리하고 있다. 하지만 사용자가 이외의 방법으로 접근하여 -999 같은 값을 입력할 수 있다면 이는 프로그램 실행의 문제로도 이어질 수 있는 부분이다. 위의 예제를 다음과 같이 수정해보자. 12345678910111213141516class Person{ private String name; private double weight; public void setWeight(double weight){ if(weight &lt;= 0){ System.out.println(\"몸무게는 0보다 작거나 같을 수 없습니다! 다시 입력해주세요\"); return; } this.weight = weight; } public double getWeight(){ return weight; }} 접근 제한자 private 을 속성에 지정하여 외부에서의 접근을 막는다. 그리고 이 속성들은 오직 메소드(행동)을 통해서만 통제할 수 있도록 할 수 있다. (public 은 외부의 모든 곳에서 사용이 가능하지만 따로 접근 제한자를 명시하지 않으면 default 제한자와 같다. 이는 외부 패키지와 상속받은 클래스등에서는 사용할 수 없게 된다) 상속상속은 자식 클래스가 부모 클래스의 특성과 기능을 그대로 물려받는 것을 말한다. 기능의 일부분을 변경해야 할 경우 자식 클래스에서 상속받은 그 기능만을 수정해서 다시 정의하게 되는데, 이러한 작업을 ‘오버라이딩(Overriding)’이라고 한다. 상속은 캡슐화를 유지하면서도 클래스의 재사용이 용이하도록 해 준다. 12345678910111213141516171819202122232425class Phone{ private int IMEI;//고유번호 private String model;//폰의 기종 이름 //객체를 생성시 기본정보를 기입받는 생성자 public Phone(int IMEI, String model){ this.IMEI = IMEI; this.model = model; } public void call(){ //전화 } public void messege(){ //메세지 }}public class Test{ public static void main(String[] args){ Phone myPhone = new Phone(000000, \"모토로라\"); }} 위의 예제는 Phone에 대한 클래스의 정의이다. 이 클래스는 외부에서 잘 사용되어 지고 있다. 하지만 시대가 변함에 따라 스마트 폰이 나오고 Phone 클래스에도 새로운 기능들을 넣으려고 한다. 만약 Phone의 클래스 내부의 값이나 메소드들의 로직을 직접 수정하게 되면 지금까지 Phone 클래스와 의존성이 있는 모든 클래스들을 다시 수정해야 한다. 예를 들어보자. 12345678910111213141516171819202122232425262728293031class Phone{ private int IMEI; private String model; private String OS; //새로 추가된 속성, 안드로이드 또는 ios 의 OS 탑재 가능 //객체 생성시 기본정보를 입력받는 생성자 public Phone(int IMEI, String model, String OS){ this.IMEI = IMEI; this.model = model; this.OS = OS; } //새로 추가된 메소드, 웹 검색을 할 수 있다. public void webSearch(){ //하지만 기존의 phone에서는 불가능하기때문에 스마트폰이아니면 불필요한 메소드가 된다. }}public class Test { public static void main(String[] args) { //Phone myPhone = new Phone(000000, \"모토로라\"); //에러 /* * 기존에 사용하던 생성자는 매개변수를 2개만 받았는데 * OS의 종류까지 초기에 입력받는 것으로 수정되었다. * 물론 메소드 오버로딩으로 기존의 생성자는 유지하고 새로운 생성자를 만들 수 도 있지만, * 이 밖에도 추가되고 수정되어야 할것이 많다고 가정해보자. */ //결국 다음과 같이 수정해야 한다. Phone myPhone = new Phone(000000, \"모토로라\", \"OS 없음\"); }} 이렇듯 내부적인 코드의 변화로 인해 Phone과 의존성이 있는 클래스들은 모두 수정해야 한다. 하지만 기존의 Phone 클래스는 수정하지 않고 Phone의 기능을 상속받아 새로 SmartPhone이라는 클래스를 정의한다면 어떻게 될까. 예제를 통해 알아보자. 12345678910111213141516171819202122232425262728293031323334353637class Phone{ private int IMEI; private String model; public Phone(int IMEI, String model){ this.IMEI = IMEI; this.model = model; } ...}class SmartPhone extends Phone{ private String OS; public SmartPhone(int IMEI, String model, String OS){ super(IMEI, model);//부모 클래스 생성자에게 필요한 매개변수 전달 this.OS = OS;//추가적으로 OS 종류 전달 } public void bluetooth() { //블루투스 } public void wiFi() { //와이파이 }}public class Test { public static void main(String[] args) { Phone myPhone = new Phone(000000, \"모토로라\");//기존 사용자는 손대지 않는다. SmartPhone yourPhone = new SmartPhone(000001, \"A90\", \"안드로이드\");// 새로 스마트폰을 사용하는 사용자만 바꾸어주면 된다. yourPhone.wiFi(); }} 위의 예제와 같이 기존의 폰을 사용 사용하는 사람은 따로 변화를 주지 않아도 되고, 새로 스마트폰을 쓰는 사람들만 SmartPhone 객체로 생성해주면 되는 것 이다. 이건 어디까지나 글쓴이가 생각하는 예제이다. 본인한테 맞는 방법으로 생각하는 것이 좋을 것 같다. 다형성객체 지향 언어에서 다형성이란 하나의 클래스나 메서드가 다양한 방식으로 동작이 가능 한 것을 의미한다. 다형성에는 오버로딩과 오버라이딩이 있다. 오버라이딩(Overriding)상위 클래스에 정의된 메소드를 하위 클래스에서 다시 정의하는 행위를 가리켜 ‘메소드 오버라이딩’ 이라 하는데, 여기서 말하는 오버라이딩은 ‘무효화 시키다’의 뜻으로 해석이 된다. 12345678910111213141516171819202122class A{ public void hello() { System.out.println(\"hello A\"); }}class B extends A{ public void hello() { System.out.println(\"hello B\"); }}public class Test{ public static void main(String[] args) { A a = new A(); a.hello(); A b = new B();//B는 A를 상속받기 때문에 B객체를 A타입의 참조변수가 참조할 수 있다. //B b = new B(); // 물론 이 방법도 가능하다. b.hello(); }} 위와 같이 A클래스를 B클래스가 상속 받으면서 기존의 A클래스에 있는 Hello 메소드를 B클래스에서 재정의 하였다. 메소드명을 바꾼다거나, 매개변수를 바꾼다거나, 반환형을 바꾼다는 개념이 아니다. 메소드 내부 로직을 바꾸는 것을 의미한다. 위의 상속의 개념에서 사용되는 overriding은 상속을 보다 편리하게 해주는 장점이 있다. 오버로딩(Overloading)한 클래스 내에 동일한 이름의 메소드를 둘 이상 정의한느 것은 허용되지 않는다. 그러나 매개변수의 선언이 다르면 가능하다. 그리고 이것을 메소드 오버로딩이라 한다. 메소드 오버로딩의 조건 메소드의 이름 메소드의 매개변수 정보 실제로 우리가 자주 사용하는 println 메소드를 예로 들어보자. 12345void println()void println(boolean x)void println(char x)void println(String x)void println(double x) 우리가 println을 쓰면서 String 값, int 값, double 값 등등의 값을 줄 수 있엇던 이유 역시 오버로딩이 있었기 때문에 가능하다. 만약 오버로딩이라는 것이 없었다면 아마 우리는 다음과 같은 메소드를 사용했을 것이다.. 12345void println()void printlnBoolean(boolean x)void printlnChar(char x)void printlnString(String x)void printlnDouble(double x) 원래 자바 포스트를 작성하기 이전에 다룰려고 했던 객체지향 특징이였다. 하지만 자바 문법에 어느정도 익숙해지고 예제를 이해하면서 넘어가면 더 자연스러울 거라고 생각하고 이 시점에 글을 작성하게 되었다. 이번 포스팅은 글쓴이의 주관적인 생각이 많이 들어가있는 글이기 때문에 틀리거나 추가 설명이 필요하다고 생각되는 부분은 지적해주시면 감사하겠습니다.(오타는 어디에나 존재합니다..)","link":"/2020/05/02/java%20%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5/java17-%EC%9E%90%EB%B0%94%20%ED%8A%B9%EC%A7%95%20%EC%A0%95%EB%A6%AC/"},{"title":"JAVA - 01. 자바 시작하기","text":"자바(JAVA)란 무엇인가?오늘부터 자바에 대해서 포스팅을 시작하겠다. 자바는 수많은 프로그래밍 언어중 하나이다. 먼저 프로그래밍 언어에 대한 정의를 하려고 한다. 프로그래밍 언어프로그래밍 언어는 컴퓨터를 이용하여 특정 문제를 해결하기 위한 프로그램을 작성하기 위해 사용되는 언어이다. 프로그래밍 언어는 일반적으로 저급언어(기계어, 어셈블리어)와 고급 언어(컴파일 언어) 로 분류할 수 있다. 저급언어(Low Level Language) 기계어 컴퓨터가 직접 이해할 수 있는 언어 0과 1의 2진수 형태로 표현되며 수행시간이 빠르다. 기종마다 기계어가 다르므로 언어의 호환성이 없다. 어셈블리어 기계어와 1:1로 대응되는 기호로 이루어진 언어로, 니모닉(Mnemonic) 언어 라고도 한다. 하드웨어 제어에 주로 사용되며, 언어의 호환성이 없다. 컴퓨터가 직접 이해할 수 없으므로 어셈블리어로 작성된 프로그램은 어셈블러를 사용하여 기계어로 번역해주어야 한다. 고급 언어(High Level Language) 인간이 실생활에서 사용하는 자연어와 비슷한 형태 및 구조를 가지고 있다. 하드웨어에 대한 깊은 지식이 없어도 프로그램 작성과 수정이 용이하다. 컴퓨터가 이해할 수 있는 기계어로 번역하기 위해 컴파일러나 인터프리터가 사용된다. 기계어와 어셈블리어를 제외한 C, JAVA, Python등의 언어가 고급언어에 해당된다. 자바의 탄생과 배경자바는 1991년에 썬 마이크로시스템즈(Sun Microsystems)사 에서 제임스 고슬링(James Gosling)이 고안하였고 그때 당시엔 오크(Oak), 또는 그린(Green) 이라고 불렸다. 오크는 최조에 가전제품에 쓰일 목적으로 개발이 되었지만 인터넷과 웹의 출현으로 오크의 초점은 가전제춤에서 인터넷으로 옮겨지게 되었다고 한다. 이후 1995년 이름을 자바(Java)로 변경하였다. 이전에 C, C++ 등의 언어가 존재했는데, 이 언어들은 직접 메모리를 핸들링하는 특징이 있다. 개발자가 컴퓨터의 메모리를 직접 관리하니 프로그램이 비정상적으로 다운되는 일 등이 생겼다. 그래서 자바는 위와 같은 언어들의 단점을 보안하려고 만들어졌고, 타 언어들과 다르게 자체적으로 메모리를 관리해준다. 2009년 썬 마이크로시스템즈는 오라클에 인수 합병되었고 자바에 대한 권리 및 유지보수 또한 오라클로 넘어가게 되었다. JVM(Java virtual machine)자바는 운영체제에 독립적이다. 이것을 가능하게 하는 것은 JVM이 운영체제 위에서 돌아가기때문이다. 예를 들어 Example.java 파일을 작성하면 javac Example.java 라는 명령어를 통해 Example.class(바이트코드) 파일로 변환할 수 있다. class 확장자 파일은 JVM이 읽을 수 있는 파일이다. 그리고 변환된 Example.class 파일을 java Example(여기서 확장자명은 생략한다) 명령어로 실행할 수 있게 되는 것이다. 이 과정을 다음과 같이 표현할 수 있다. 자바 소스코드(Example.java) -&gt; 자바 컴파일러 -&gt; 바이트코드(Example.class) -&gt; 가상머신(JVM) -&gt; 운영체제(윈도우 or 리눅스) 에서 실행 가능 컴파일이란?프로그래밍 언어를 컴퓨터가 알 수 있는 기계어로 바꾸는 행위. 컴파일러(Compiler)는 기계어로 바꾸어주는 프로그램을 말한다.(자바를 설치하면 기본적으로 자바 컴파일러도 설치된다) 자바의 특징이식성이 높은 언어이다이식성이란 서로 다른 실행 환경을 가진 시스템 간에 프로그램을 옮겨 실행할 수 있는 것을 말한다. 자바 언어로 개발된 프로그램은 소스 파일을 수정하지 않아도, 자바 실행 환경(JRE)이 설치되어 있는 모든 운영 체제에서 실행 가능하다. 객체 지향 언어이다객체 지향 프로그래밍(Object Oriented Programming, OOP)이란 프로그램을 개발하는 방법론중 하나이다. 말 그대로 객체를 만들어 상호작용하는 방식으로 프로그래밍을 한다. 또한 객체 지향 언어가 가져야 할 캡슐화, 상속, 다형성 기능을 완벽하게 지원한다. 메모리를 자동으로 관리한다위의 자바의 탄생과 배경에서 설명했듯이 C 또는 C++이 메모리 관리를 위해 개발자가 직접 코드를 작성해야 하는 반면, 자바는 개발자가 메모리에 직접 접근할 수 없으며 자바가 직접 메모리를 관리한다. 멀티스레드를 쉽게 구현할 수 있다자바는 스레드 생성 및 제어와 관련된 라이브러리 API를 제공하고 있기 때문에 실행되는 운영체제에 상관없이 멀티 스레드를 쉽게 구현할 수 있다. 함수 지향적인 코딩을 지원한다함수적 프로그래밍은 대용량의 데이터 병렬 처리와 이벤트 지향 프로그래밍을 위해 적합하기 때문에 최근 들어 다시 주목받고 있다. 자바는 이 함수적 프로그래밍을 위해 람다식을 자바 8부터 지원한다. 람다식을 사용하면 컬렉션 요소를 필터링, 매핑, 집계 처리하는게 쉬워지고, 코드가 매우 간결해진다는 장점이 있다. 동적 로딩(Dynamic Loading)을 지원한다애플리케이션이 실행될 때 모든 객체가 생성되지 않고, 각 객체가 필요한 시점에 클래스를 동적 로딩해서 생성한다. 또한 유지보수 시 해당 클래스만 수정하면 되기 때문에 전체 애플리케이션을 다시 컴파일할 필요가 없다. 따라서 유지보수가 쉽고 빠르다. 오픈소스 라이브러리가 풍부하다자바는 오픈소스 언어이기 때문에 자바 프로그램에서 사용하는 라이브러리 또한 오픈소스가 많다. 오픈소스 라이브러리를 사용하면 개발 시간을 단축하면서 안정성이 높은 애플리케이션을 쉽게 개발할 수 있다. C나 C++에 비해 속도가 느리다 자바는 한 번의 컴파일링으로 실행 가능한 기계어가 만들어지지 않고 JVM에 의해 기계어로 번역되고 실행하는 과정을 거치기 때문에 C나 C++의 컴파일 단계에서 만들어지는 완전한 기계어보다는 속도가 느리다. 그러나 바이트 코드를 기계어로 변환해주는 JIT 컴파일러 같은 기술 적용으로 JVM의 기능이 향상되어 속도의 격차가 많이 줄어들었다. 예외처리가 불편하다자바는 다른 언어들과 달리 프로그램 실행 시 발생할 수 있는 예외(Exception)들을 개발자가 직접 선언하여 처리해야 한다. 그렇지 않으면 아예 컴파일이 되지 않는다.","link":"/2020/04/21/java%20%EA%B8%B0%EC%B4%88/java01-%EC%9E%90%EB%B0%94%EB%9E%80/"},{"title":"JAVA - 05. 제어문","text":"조건문이란?조건식을 만족하느냐 아니냐에 따라 프로그램의 실행을 제어할 수 있는 문법이다. 이 때 조건식은 true나 false 같은 boolean형 타입을 반환할 수 있는 식을 말한다. 자바 문법 중에서 조건문은 if, switch, 조건연산자등이 있다. if문특정 조건이 만족될 때에만 실행하고픈 문장이 있다면 키워드 if를 사용하면 된다. 그리고 두개의 문장 중 조건에 따라 하나만 실행하고 싶다면 거기에 else를 더 추가하면 된다. else는 if문 소괄호의 조건이 참이 아니라면 실행되는 곳이다. 1234567891011//if문 예제int num1 = 1;int num2 = 2;if(num1 &lt; num2) { //조건 true 시 실행되는 영역 System.out.println(\"참입니다\");}else { //조건 false 시 실행되는 영역 System.out.println(\"거짓입니다\");} if ~ else if 문은 2개 이상의 조건을 주고싶을 때 사용할 수 있는 방법이다. 밑의 예제를 보자. 12345678910//if ~ else if문 예제if(num1 &lt; num2) { System.out.println(\"num1보다 num2가 큽니다.\");}else if(num1 &gt; num2) { System.out.println(\"num2보다 num1이 큽니다.\");}else if(num1 == num2) { System.out.println(\"num1과 num2는 같습니다.\");}else { System.out.println(\"셋다 해당되지 않습니다.\");} 조건 연산자(삼항 연산자)조건 연산자는 피연산자가 세 개인 연산자이다. 이러한 조건 연산자는 간단한 if~else문을 대체하는 용도로 주로 사용된다. 밑의 예제를 보자. 12345//조건 연산자 예제int num1 = 10;int num2 = 20;int result = (false) ? num1 : num2;System.out.println(\"결과 : \"+ result); 변수 num5 는 선언과 동시에 조건연산자에 의한 값을 할당한다. ()안의 조건이 참이면 num3이 저장될 것이고 , 거짓이라면 num4가 저장될 것 이다. 하지만 임의적으로 false라는 값을 줌으로써 변수 num5에는 num4의 값, 즉 20이 저장되는것을 알 수 있다. switch문조건에 따라 실행할 문장을 구분한다는 측면에서 if문과 유사하다. else if가 많이 들어가는 상황에서는 switch문이 더 좋은 선택이 될 수 있다. 밑의 예제를 보자. 123456789101112131415public static void main(String[] args) { int num1 = 10; String animal = \"고양이\"; switch(animal) { case \"강아지\": System.out.println(\"강아지가 맞습니다\"); case \"고양이\": System.out.println(\"고양이가 맞습니다.\"); case \"고라니\": System.out.println(\"고라니가 맞습니다.\"); default : System.out.println(\"해당하는 동물이 없습니다.\");} 레이블(Label) 위의 switch 내부에 존재하는 키워드 case와 default를 가리켜 레이블이라고 한다. 레이블 case와 default는 코드상에서 위치를 표시하기 위해 사용된다. case는 switch 의 조건과 같은 타입을 가져야하고 같은 결과 값일 경우 그 case 이후의 값들이 출력이된다. 이것은 이후에 나오는 break문으로 제어할 수 있다. default는 case에서 switch와 같은 조건의 값이 없다면 실행되는 구문이다. 그리고 case와 default를 보면 들여쓰기가 되어있지 않다. 이는 책에 위치를 표시하는 레이블과 그 성격이 같다. 그리고 레이블은 책을 펼치기 전에 보여야 한다. 이와 마찬가지로 case와 default도 조금이라도 잘 보이도록 들여쓰기 대상에서 제외하는 것이 일반적이다. 일단 위의 결과를 보게되면 switch의 참거짓을 판단하는 매개변수로 animal이라는 변수를 주었다. 이 변수에 할당된 값은 ‘고양이’ 이다. 당연히 콘솔에 고양이가 맞습니다. 라고 찍힐 것이라고 예상할 수 있지만 결과는 고양이가 맞습니다. 이후에 나오는 모든 조건의 결과 고양이가 맞습니다.고라니가 맞습니다.해당하는 동물이 없습니다. 가 찍힌다. 이는 break 라는 키워드로 case의 실행구문이 끝난 이후 사용해 주어야 하위 case들이 실행 되는 것을 막을 수 있다. 밑의 예제를 보자. 12345678910111213switch(animal) {case \"고양이\": System.out.println(\"고양이가 맞습니다.\"); break;case \"강아지\": System.out.println(\"강아지가 맞습니다.\"); break;case \"고라니\": System.out.println(\"고라니가 맞습니다.\"); break;default : System.out.println(\"해당하는 동물이 없습니다.\");} 위의 switch문과는 다르게 각 case가 끝나는 부분에 break가 추가 되었다. 그리고 결과로는 고양이가 맞습니다. 이후의 출력은 사라졌다. 즉 if, else처럼 해당하는 조건에 맞는 결과값만이 출력이 되는 것을 확인 할 수 있다. 이는 switch문의 일반적인 사용 모델이다. 반복문이란?반복문은 어떤 작업이 반복적으로 수행되도록 할 때 사용된다. while, do~while, for문등을 예로 들 수 있다. while문먼저 while 문 예제를 살펴보자. 1234567891011public static void main(String[] args) { int num = 0; //While문 while(num &lt; 5) { System.out.println(\"I Like Java\"); num++; }} 위의 결과는 I Like Java가 5번 출력되는 것을 알 수 있다. while문의 소괄호에는 반복의 조건을 명시한다. true 또는 false가 와야 하므로 이를 반환하는 연산이 오게 된다. 그리고 그 조건이 true를 반환하는 동안에는 횟수에 상관없이 while문의 중괄호가 반복 실행되는데 , 다음의 패턴으로 반복이 된다. 먼저 조건검사 그리고 결과가 true이면 중괄호 영역 실행 반면에 밑에 예제에서 다루는 do ~ while문은 다음의 패턴으로 진행한다. 먼저 중괄호 영역 실행 그리고 조건 검사 후 결과가 true이면 반복 결정밑의 예제를 확인해 보자. 1234567int num2 = 0;//do_while문do { System.out.println(\"I Like Java \" + num2); num2++;}while(num2 &lt; 5); 위 예제는 이전의 while문을 do-while로 바꾼것 뿐이다. 따라서 실행결과는 동일하다. 보는것처럼 while문으로 작성된 문장은 do-while로도 작성가능한 경우가 대부분다. 따라서 “조건에 따른 반복이 필요하다. 그런데 반드시 한 번은 실행을 해야 한다.” 라는 경우에는 do~while문을 사용하는 것이 괜찮다. 이 이외의 경우에는 while문 또는 이어서 소개하는 for문을 사용하는 것이 바람직하다. 그래야 선택하는 반복문에 더 많은 의미를 부여할 수 있다. for문이전에 다루었던 while문에서 했던 예제들은 거의 반복하는 값이 정해져있었다. 이처럼 ‘반복의 횟수가 정해져 있는 상황’ 에서는 for문을 이용해서 다음과 같이 작성하는 것이 더 간결하고 뜻도 더 잘 통한다. 밑의 예제를 보자. 1234567//for문 예제public static void main(String[] args) { for(int i=0; i&lt;5; i++) { System.out.println(\"I Love Java\"); }} 위 예제에서 실행 흐름을 보자면 변수의 선언및 초기화 반복 조건이 true인지 확인 반복 영역을 실행 (반복 조건이 true이면) 변수의 값 증가 그리고 그 이후 두번째 반복부터는 첫번째 조건인 변수의 선언및 초기화 부분은 지나치게 된다. break 와 continuebreak 문은 앞서 switch문을 빠져나가는 용도로 다루었었는데, 마찬가지로 반복문을 빠져나가는 용도로도 사용된다.보통 if문과 함께 사용되어 특정 조건이 만족될 때, 이를 감싸는 반복문을 빠져나가도록 구성이 된다. break는 이전에 다루던 것과 별 차이가 없기 때문에 따로 예제를 다루지 않는다. continue문은 break문과 혼동하기 쉬워서 주의가 필요하다. 우선 continue는 반복문의 탈출과 거리가 멀다. 실행하던 반복문의 나머지 부분을 생략하고 프로그램의 흐름을 조건 검사 부분으로 이동시킨다. 밑의 예제를 보자. 1234567891011public static void main(String[] args){ int n = 0; while((n++)&lt;5) {//while 하단부에서 증가시켜줬던 구문을 이런식으로 작성할 수 있다. if(n == 1) continue; System.out.println(\"I Like Java\"); }} 위의 구문을 실행시켜보면 총 4번 실행 되는 것을 알 수 있다. 0~4까지 총 5번 출력되는 것이 맞는 것 이라고 생각 할 수 있는데, 이유는 조건에 따른 continue 구문이 실행하게 되면 그 이후의 문장은 무시하고 다시 반복문의 조건 검사로 이동하게 되기때문이다. 본 문서는 책의 일부 내용을 발췌한 것으로서 온오프라인 상의 무단 배포를 금합니다.","link":"/2020/04/22/java%20%EA%B8%B0%EC%B4%88/java05-%EC%A0%9C%EC%96%B4%EB%AC%B8/"},{"title":"JAVA - 02. 변수와 자료형","text":"변수(Variable)란? 변수란 데이터의 저장과 참조를 위해 ‘할당된 메모리 공간’ 에 붙인 이름을 말한다. 변하는 값을 프로그램에서 나타내는 방법 변수 선언변수를 선언하는 것은 해당 자료형의 크기만큼의 메모리를 사용하겠다는 뜻 이다. 메모리의 위치를 변수명으로 참조한다. 변수는 다음과 같은 방식으로 선언할 수 있다. 12345678910111213141516171819202122[자료형] [변수명];//exampleint number;// tip.선언 이후 값을 할당하는 방법은 다음과 같이 할 수 있다.number = 10;// tip.선언과 동시에 값을 할당할 수 있는데, 이것을 `선언 및 초기화` 라고 한다.int age = 26; // tip.선언 되어있는 변수 이름과 이름이 중복될 수 없다.(변수의 스코프에 한함)int age; // 에러// tip.만약 변수를 선언만 하고 값을 할당하지 않았다면 사용될 수 없다.int testNum;System.out.println(testNum); // 에러// tip.동일한 자료형에 한해서 다수의 선언이 가능하다.int number1, number2, number3;// tip.다수의 선언과 동시에 값의 할당도 가능하다.int number4 = 10, number5 = 20; 식별자 규칙자바는 대소문자를 구분한다. 따라서 Num1 과 num1은 서로 다른 이름으로 인식된다. 때문에 자료형 int를 대신하여 INT를 사용할 수 없고 변수의 이름을 짓는데 다음과 같은 제약사항이 존재한다. 영문자나 숫자를 사용한다. 단 숫자로 시작할 수 없다. 특수문자중에서는 _와 $를 사용할 수 있다.(보통 사용할 경우 변수명 앞에 붙인다) 예약어는 사용할 수 없다.(ex&gt; int, double, char..) 변수는 그 쓰임에 맞는 이름으로 만드는 것이 가독성에 좋다. 일반적인 관례 변수는 소문자의 명사를 사용 클래스 이름은 대문자의 명사를 사용 메서드 이름은 소문자의 동사를 사용 두단어 이상 사용할 경우 카멜 케이스(Camel Case)로 표기(ex&gt; helloWorld, intNum..) 상수는 대문자의 명사(두 단어 이상 사용할 경우 _(언더바)로 연결) 자료형앞서 int 라는 키워드를 사용하여 변수를 만들었는데, 이러한 키워드를 가리켜 자료형 이라고 한다. 그리고 자바에서는 다양한 자료형을 제공한다. 자바의 자료형은 크게 기본형(primitive type)과 참조형(referene type)으로 나뉜다. 기본형(primitive type) 자바언어에서 기본적으로 제공해주는 자료형 메모리의 크기가 정해져있다. 정수, 실수, 문자, 논리 형이 있다. 참조형(referene type) JDK(java development kit)에서 제공되는 클래스와 프로그래머가 정의하는 클래스 클래스에 따라 사용되는 크기가 다르다. String, 그리고 사용자가 만든 클래스 등이 포함된다. 기본 자료형 종류 자료형 데이터 크기 표현 가능 범위 boolean 참과 거짓 1바이트 true, false char 문자 2바이트 유니코드 문자 byte 정수 1바이트 -128~127 short 정수 2바이트 -32,768~32,767 int 정수 4바이트 -2,147,483,648 ~ 2,147,483,647 long 정수 8바이트 -9,223,372,036,854,775,808 ~ 엄청크다.. float 실수 4바이트 단정도 실수형 (유효 자리는 7 정도임) double 실수 8바이트 배정도 실수형 (유효 자리는 15정도) 정수 자료형자바는 정수형 연산을 진행할 때 int형(4 byte)을 기본으로 한다. 12345// IntegerTest.javapublic static void main(String[] args){ int iNum = 2147483648; //에러 , 2147483647까지 표현 가능 long lNum = 2147483648;//에러} 위의 예제의 두 코드들은 에러가 난다. int 형 변수 iNum 은 4byte에 초과되는 값을 담았기 때문에 에러가 나는것은 이해할 수 있다. 하지만 int형에 담을 수 없는 값이기에 long형 변수에 할당했는데도 오류가 나고있다. 위에 설명했듯이 자바는 정수형 연산을 4byte를 기본으로 하기때문에 위의 long lNum = 2147483648 코드의 숫자들을 4byte에 담으려고 하니 에러가 나는 것 이다. 이럴때 형변환 이라는 것을 해주어야 하는데 다음과 같이 해결할 수 있다. 1234// IntegerTest.javapublic static void main(String[] args){ long num = 2147483648L;} 뒤에 l 또는 L 을 붙여줌으로써 형변환할 수 있다. 형변환은 다른글에서 자세히 다루도록 하겠다. 실수 자료형실수 자료형은 연산을 진행할 때 double형(8 byte)을 기본으로 한다. 123456//DoubleTest.javapublic static void main(String[] args){ float fNum1 = 0.1; // 에러 float fNum2 = 0.1F;} 위의 경우와 비슷한 예제이다. 실수는 double을 기본으로 연산을 하기때문에 double보다 낮은 float에 값을 할당 시 위 예제와 같이 f 또는 F를 값 뒤에 붙여 주어야 한다. 자바에서 정수형은 주로 int가 많이 사용이되고 실수형은 double이 많이 사용된다. 문자 자료형 내부적으로는 비트의 조합으로 표현된다. 인코딩 -&gt; 각 문자에 따른 특징인 숫자 값(코드 값)을 부여 디코딩 -&gt; 숫자값을 원래 문자로 반환 123456789101112131415161718// CharacterTest.javapublic static void main(String[] srg) { char ch = 'A'; System.out.println(ch); //A System.out.println((int)ch); //65 int iCh = 66; System.out.println(iCh); //66 System.out.println((char)iCh); //B //char ch2 = -66; 음수값은 들어갈 수 없음 char hangle1 = '\\uAC00'; //유니코드 넣는 방법 System.out.println(hangle1); char hangle2 = '가'; //물론 이렇게 표현할 수 있다. System.out.println(hangle2);} 문자의 표현에 대한 약속을 가리켜 ‘문자셋(Character Set)’ 이라고 한다. 이러한 문자 셋의 설계는 지역 및 국가별로 각각 이루어져 그 수가 다양하다. 때문에 데이터를 주고받거나 여러 국가의 언어를 동시에 표현하는 상황에서는 문제가 되는데, 그래서 모든 나라의 문자를 수용하여 전 세계적으로 사용할 수 있는 문자 셋을 설계하게 되었다. 이를 가리켜 ‘유니코드(Unicode)’라고 한다. 문자 세트 아스키 : 1byte로 영문자, 숫자, 특수문자등을 표현 유니코드 : 한글과 같은 복잡한 언어를 표현하기 위한 표준 인코딩 (UTF-8, UTF-16이 대표적이다) 논리 자료형논리 자료형은 boolean이라는 키워드를 사용하여 선언한다. 1byte의 크기를 사용하며 보통 참과 거짓을 구분할 때 많이 사용된다. 12345//BooleanTest.javapublic static void main(String[] args){ boolean isMarried = false; System.out.println(isMarried);// fasle} 본 문서는 책의 일부 내용을 발췌한 것으로서 온오프라인 상의 무단 배포를 금합니다.","link":"/2020/04/21/java%20%EA%B8%B0%EC%B4%88/java02-%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/"},{"title":"JAVA - 03. 상수와 형변환","text":"상수(Constant)란? 변하지 않는 수를 말한다. 상수 선언자바의 일반적인 상수는 변수를 선언할 때 final이라는 선언을 추가하면 그 변수는 ‘상수’가 된다. 그리고 상수는 다음과 같은 특징이 있다. 값을 딱 한 번만 할당할 수 있다. 한 번 할당된 값은 변경이 불가능하다. 1234567891011// tip.상수의 선언final int NUM;// tip.선언된 상수에 값 할당NUM = 10;// tip.그 이후로 값의 변경은 불가능하다NUM = 5; // 에러// tip.변수와 마찬가지로 선언과 동시에 초기화가 가능하다.final int FINAL_NUMBER = 10; 상수의 관례그리고 위와같이 관례상 상수의 이름은 다음 두가지 사항을 지켜서 짓는다. 상수의 이름은 모두 대문자로 짓는다. 이름이 둘 이상의 단어로 이뤄질 경우 단어 사이에 언더바를 넣는다. 리터럴(literal)프로그램에서 사용하는 모든 숫자, 문자, 논리 값 등을 가리켜 리터럴이라고 한다. 모든 리터럴(리터럴 상수라고도 한다)들은 상수 풀(Constant Pool)이라는 곳에 저장되어 있다. 12int num = 100; //right value에 해당하는 100이 리터럴이다.char ch = 'A'; //마찬가지로 A도 리터럴 이다. 리터럴(숫자, 문자, 논리 값) –로딩–&gt; Constant Pool(10, ‘A’, true) –대입, 복사–&gt; 변수 형변환서로 다른 자료형의 값이 대입이 되는 경우 형변환이 일어난다. byte -&gt; short -&gt; int &amp;&amp; char -&gt; long -&gt; float -&gt; double 일반적으로 위와 같이 화살표의 방향대로 대입이 되면 묵시적인 형변환이 일어나고 아닐 경우 직접 명시적인 형변환을 해주어야 한다. 묵시적 형 변환(Implicit Type Conversion) 작은 수에서 큰 수로 대입 덜 정밀한 수에서 더 정밀한 수로 대입(정수에서 실수) 123456789101112//ImplicitConterSionTest.javapublic static void main(String[] args) { //정수 byte bNum = 10; short sNum = bNum; int iNum = sNum; long lNum = iNum; //실수 float fNum = lNum; double dNum = fNum;} 위의 예제처럼 크기가 작은 수에서 큰 타입 순서로 대입을 할경우 자동적인 형변환이 일어난다. 명시적 형 변환(Explicit Type Conversion) 변환되는 자료형을 명시(타입 캐스팅) 이에 따른 자료의 손실이 발생할 수 있다. 123456789101112131415161718//ExplicitConterSionTest.javapublic static void main(String[] args) { // 예제 1 int iNum = 1000; byte bNum = (byte)iNum; //형변환을 억지로 하면 데이터 손실을 불러올 수 있다. System.out.println(bNum);//-24 // 예제 2 double dNum = 1.2; float fNum = 0.9F; int iNum1 = (int)dNum + (int)fNum; //1 int iNum2 = (int)(dNum + fNum); //2 System.out.println(iNum1); System.out.println(iNum2);} 예제 1은 int형 변수에 1000의 값을 할당하였다. 그리고 byte에게 대입하려고 한다. 하지만 byte는 int보다 크기가 작음으로 (byte) 와같이 프로그래머가 직접 byte형으로 변환 하겠다고 명시해주어야한다. 그리고 명시적인 형변환을 하게 되면 데이터가 손실될 수 도 있다. 예제 1의 경우 byte가 담을 수 있는 크기를 초과하여 값이 잘려 -24가 출력 되는 것을 알 수 있다. 예제 2의 핵심은 두개의 실수를 더하여 정수형 변수에 대입하려고 하는 것 이다. iNum1의 경우엔 각 dNum, fNum 의 값을 형변환 하고 연산을 진행한다. 즉 각자의 값은 소숫점이 잘려나가 1, 0이된다. 결국 1+0의 연산을 통해 1이라는 값이 iNum1에 대입이 된다. iNum2의 경우 먼저 변수의 값이 연산을 진행 한 이후 타입캐스팅이 일어난다 1.2 + 0.9 = 2.1이 되고 그 이후 소숫점이 잘려 2라는 값이 대입이 되는 것을 알 수 있다. 이것은 이 다음에 다룰 연산자에서 연산 우선순위를 통해 알 수 있다. 본 문서는 책의 일부 내용을 발췌한 것으로서 온오프라인 상의 무단 배포를 금합니다.","link":"/2020/04/22/java%20%EA%B8%B0%EC%B4%88/java03-%EC%83%81%EC%88%98%EC%99%80%20%ED%98%95%EB%B3%80%ED%99%98/"},{"title":"JAVA - 04. 연산자","text":"연산자란?어떠한 기능 또는 어떤 대상체에 계산과 같은 처리를 수행하는 문자 또는 기호를 연산자라 한다. Java에서의 연산자는 크게 단항, 이항, 삼항, 대입 연산자로 나뉘며, 이항 연산자는 산술, 비교, 논리 연산자로 나뉠 수 있다. 연산자(operator) : 어떠한 기능을 수행하는 기호 (+, -, *, / 등) 피연산자(operand) : 연산자의 작업 대상 (변수, 상수, 수식 등) 연산자의 종류산술 연산자 (+, -, *, /, %)우리가 평소에 자주 사용하는 연산이다. 1234567//사용 예제int a = 10, b =20;System.out.println(a + b); //더하기System.out.println(a - b); //빼기System.out.println(a * b); //곱하기System.out.println(a / b); //나누기System.out.println(a % b); //나눈 나머지 대입 연산자(=) 오른쪽에서 왼쪽으로 할당 변수끼리 할당 가능 변수에 값이 존재하더라도 다른 값을 할당하면 마지막 할당된 값이 할당 연산자중에 우선순위가 제일 낮다 123int a = 0, b = 1;a = b; // 변수의 자료형이 같다면 할당 가능 : a 값이 1로 updatea = 20; // 당연히 자료형에 맞는 타입의 값이면 할당 가능 복합 대입 연산자(+=, -=, *=, /=, %=)연산자와 대입 연산자를 결합한 연산 후 대입 연산 12345678910111213141516171819202122232425//복합 대입 연산자// +=a += b; // a = a+b// -=a -= b; // a = a-b// *=a *= b; // a = a*b// /=a /= b; // a = a/b// %=a %= b; // a = a%b;// &amp;=a &amp;= b; // a = a&amp;b;// |=a |= b; // a = a | b;// ^=a ^= b; // a = a ^ b; 형변환 연산자((DataType))자동형변환의 경우 알아서 형변환이 일어나지만, 명시적으로 형변환을 필요로 할 때 사용가능하다. 12345int iNum = 20;short sNum = (short)iNum;double dNum = 5.5;float fNum = (float)dNum; 증감 연산자(++, - -) 증가 연산자(++) : 피연산자의 값을 1 증가시킨다. 감소 연산자(-­ -­) : 피연산자의 값을 1 감소시킨다. 증감연산자는 피연산자의 앞 또는 뒤에 붙일 수 있는데 그에따라 차이점을 보인다. 1234567891011//전위 형 : 값이 참조되기 전에 증가시키거나 감소시킨다.int a = 0;System.out.println(++a); //1//후위 형 : 값이 참조되고 난 이후 증가시키거나 감소시킨다.int b = 0;System.out.println(b++); //0//이 이후에 값이 증가 된상태System.out.println(b); //1 비교 연산자(&gt;, &gt;=, &lt;, &lt;=, ==, !=, instanceof)비교 연산자는 제어문의 조건문이나 반복문에 자주 쓰인다. 12345678910//사용 예시int a = 0 , b = 1;if(a &lt; b) // a 보다 b가 크다 : 참if(a &lt;= b) // a 보다 b가 크거나 같다 : 참if(a &gt; b) // a 가 b보다 크다 : 거짓if(a &gt;= b) // a 가 b보다 크거나 같다 : 거짓if(a == b) // a 와 b가 같다 : 거짓Person p = new Person();System.out.println(p instanceof Person); // p가 Person의 객체인지 참, 거짓으로 구분 : 참 비트 연산자(&amp;, |, ^, ~)데이터를 비트단위로 연산할 수 있는 연산자로 정수형또는 논리형에만 사용할 수 있다. 123456789System.out.println(0&amp;1); // 비트 단위의 논리곱(AND)System.out.println(5|1); // 비트 단위의 논리합(OR)System.out.println(0^1); // 비트 단위의 배타적 논리합(AND)System.out.println(~1); // 비트 단위의 보수(부정)System.out.println(0&gt;&gt;2); // 0을 2 만큼 오른쪽으로 이동시킴. 이동한 만큼의 왼쪽 비트는 부호 확장이 발생System.out.println(0&gt;&gt;&gt;1); // 부호 확장이 없고 이동한 만큼의 왼쪽 비트는 항상 0 으로 채운다System.out.println(true&amp;true);System.out.println(true^false); 논리 연산자(&amp;&amp;, ||, !)비트 논리 연산자의 경우 연산 대상이 정수형과 논리형에 모두 가능하지만, 논리 연산자의 경우 논리형에만 적용할 수 있다. 1234567System.out.println(true &amp;&amp; true); //trueSystem.out.println(true &amp;&amp; false); //falseSystem.out.println(true || true); //trueSystem.out.println(true || false); //trueSystem.out.println(false || false);//falseSystem.out.println(!true);//falseSystem.out.println(!false;//true 삼항 연산자( ? : )조건을 평가해서 소괄호 값이 참, 거짓이냐에 따라 수식1, 수식2 값을 대입한다. 12345//조건 연산자 예제int num1 = 10;int num2 = 20;int result = (false) ? num1 : num2;System.out.println(\"결과 : \"+ result); 연산자 우선순위 우선순위 연산자 1 () [] . 2 ++ , - - , ~ , ! 3 * , / , % 4 + , - 5 &gt;&gt; , &gt;&gt;&gt; , &lt;&lt; 6 &gt; , &gt;= , &lt; , &lt;= 7 == , != 8 &amp; 9 ^ 10 ｜ 11 &amp;&amp; 12 ｜｜ 13 a ? b : c 14 = tip. 우선순위에 상관 없이 ()를 사용하여 우선순위를 지정할 수 있다","link":"/2020/04/22/java%20%EA%B8%B0%EC%B4%88/java04-%EC%97%B0%EC%82%B0%EC%9E%90/"}],"tags":[{"name":"java","slug":"java","link":"/tags/java/"},{"name":"java virtual machine","slug":"java-virtual-machine","link":"/tags/java-virtual-machine/"},{"name":"jvm","slug":"jvm","link":"/tags/jvm/"},{"name":"java 변수","slug":"java-변수","link":"/tags/java-%EB%B3%80%EC%88%98/"},{"name":"식별자","slug":"식별자","link":"/tags/%EC%8B%9D%EB%B3%84%EC%9E%90/"},{"name":"자료형","slug":"자료형","link":"/tags/%EC%9E%90%EB%A3%8C%ED%98%95/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"nodejs","slug":"nodejs","link":"/tags/nodejs/"},{"name":"git","slug":"git","link":"/tags/git/"},{"name":"git page","slug":"git-page","link":"/tags/git-page/"},{"name":"github","slug":"github","link":"/tags/github/"},{"name":"hexo post","slug":"hexo-post","link":"/tags/hexo-post/"},{"name":"markdown","slug":"markdown","link":"/tags/markdown/"},{"name":"hexo icarus theme","slug":"hexo-icarus-theme","link":"/tags/hexo-icarus-theme/"},{"name":"제어문","slug":"제어문","link":"/tags/%EC%A0%9C%EC%96%B4%EB%AC%B8/"},{"name":"if문","slug":"if문","link":"/tags/if%EB%AC%B8/"},{"name":"for문","slug":"for문","link":"/tags/for%EB%AC%B8/"},{"name":"while문","slug":"while문","link":"/tags/while%EB%AC%B8/"},{"name":"do while문","slug":"do-while문","link":"/tags/do-while%EB%AC%B8/"},{"name":"조건문","slug":"조건문","link":"/tags/%EC%A1%B0%EA%B1%B4%EB%AC%B8/"},{"name":"반복문","slug":"반복문","link":"/tags/%EB%B0%98%EB%B3%B5%EB%AC%B8/"},{"name":"상수","slug":"상수","link":"/tags/%EC%83%81%EC%88%98/"},{"name":"형변환","slug":"형변환","link":"/tags/%ED%98%95%EB%B3%80%ED%99%98/"},{"name":"메소드","slug":"메소드","link":"/tags/%EB%A9%94%EC%86%8C%EB%93%9C/"},{"name":"스코프","slug":"스코프","link":"/tags/%EC%8A%A4%EC%BD%94%ED%94%84/"},{"name":"변수의 스코프","slug":"변수의-스코프","link":"/tags/%EB%B3%80%EC%88%98%EC%9D%98-%EC%8A%A4%EC%BD%94%ED%94%84/"},{"name":"scope","slug":"scope","link":"/tags/scope/"},{"name":"나비보벳따우","slug":"나비보벳따우","link":"/tags/%EB%82%98%EB%B9%84%EB%B3%B4%EB%B2%B3%EB%94%B0%EC%9A%B0/"},{"name":"피아노","slug":"피아노","link":"/tags/%ED%94%BC%EC%95%84%EB%85%B8/"},{"name":"클래스","slug":"클래스","link":"/tags/%ED%81%B4%EB%9E%98%EC%8A%A4/"},{"name":"class","slug":"class","link":"/tags/class/"},{"name":"인스턴트","slug":"인스턴트","link":"/tags/%EC%9D%B8%EC%8A%A4%ED%84%B4%ED%8A%B8/"},{"name":"객체","slug":"객체","link":"/tags/%EA%B0%9D%EC%B2%B4/"},{"name":"생성자","slug":"생성자","link":"/tags/%EC%83%9D%EC%84%B1%EC%9E%90/"},{"name":"클래스 변수","slug":"클래스-변수","link":"/tags/%ED%81%B4%EB%9E%98%EC%8A%A4-%EB%B3%80%EC%88%98/"},{"name":"맴버 변수","slug":"맴버-변수","link":"/tags/%EB%A7%B4%EB%B2%84-%EB%B3%80%EC%88%98/"},{"name":"필드 변수","slug":"필드-변수","link":"/tags/%ED%95%84%EB%93%9C-%EB%B3%80%EC%88%98/"},{"name":"static 변수","slug":"static-변수","link":"/tags/static-%EB%B3%80%EC%88%98/"},{"name":"static 메소드","slug":"static-메소드","link":"/tags/static-%EB%A9%94%EC%86%8C%EB%93%9C/"},{"name":"this","slug":"this","link":"/tags/this/"},{"name":"오버로딩","slug":"오버로딩","link":"/tags/%EC%98%A4%EB%B2%84%EB%A1%9C%EB%94%A9/"},{"name":"Overloading","slug":"Overloading","link":"/tags/Overloading/"},{"name":"히로시의 회상","slug":"히로시의-회상","link":"/tags/%ED%9E%88%EB%A1%9C%EC%8B%9C%EC%9D%98-%ED%9A%8C%EC%83%81/"},{"name":"배열","slug":"배열","link":"/tags/%EB%B0%B0%EC%97%B4/"},{"name":"array","slug":"array","link":"/tags/array/"},{"name":"상속","slug":"상속","link":"/tags/%EC%83%81%EC%86%8D/"},{"name":"메소드 오버라이딩","slug":"메소드-오버라이딩","link":"/tags/%EB%A9%94%EC%86%8C%EB%93%9C-%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%94%A9/"},{"name":"method overriding","slug":"method-overriding","link":"/tags/method-overriding/"},{"name":"Object","slug":"Object","link":"/tags/Object/"},{"name":"인터페이스","slug":"인터페이스","link":"/tags/%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4/"},{"name":"interface","slug":"interface","link":"/tags/interface/"},{"name":"추상 메소드","slug":"추상-메소드","link":"/tags/%EC%B6%94%EC%83%81-%EB%A9%94%EC%86%8C%EB%93%9C/"},{"name":"자바 객체지향","slug":"자바-객체지향","link":"/tags/%EC%9E%90%EB%B0%94-%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5/"},{"name":"객체지향","slug":"객체지향","link":"/tags/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5/"},{"name":"자바의 특징","slug":"자바의-특징","link":"/tags/%EC%9E%90%EB%B0%94%EC%9D%98-%ED%8A%B9%EC%A7%95/"},{"name":"객체지향 추상화","slug":"객체지향-추상화","link":"/tags/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%EC%B6%94%EC%83%81%ED%99%94/"},{"name":"객체지향 다형성","slug":"객체지향-다형성","link":"/tags/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%EB%8B%A4%ED%98%95%EC%84%B1/"},{"name":"객체지향 캡슐화","slug":"객체지향-캡슐화","link":"/tags/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%EC%BA%A1%EC%8A%90%ED%99%94/"},{"name":"객체지향 정보은닉","slug":"객체지향-정보은닉","link":"/tags/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%EC%A0%95%EB%B3%B4%EC%9D%80%EB%8B%89/"},{"name":"객체지향 상속","slug":"객체지향-상속","link":"/tags/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%EC%83%81%EC%86%8D/"},{"name":"오버라이딩","slug":"오버라이딩","link":"/tags/%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%94%A9/"},{"name":"연산자","slug":"연산자","link":"/tags/%EC%97%B0%EC%82%B0%EC%9E%90/"},{"name":"자바 연산자","slug":"자바-연산자","link":"/tags/%EC%9E%90%EB%B0%94-%EC%97%B0%EC%82%B0%EC%9E%90/"}],"categories":[{"name":"웹 개발","slug":"웹-개발","link":"/categories/%EC%9B%B9-%EA%B0%9C%EB%B0%9C/"},{"name":"github page & hexo","slug":"웹-개발/github-page-hexo","link":"/categories/%EC%9B%B9-%EA%B0%9C%EB%B0%9C/github-page-hexo/"},{"name":"java","slug":"웹-개발/java","link":"/categories/%EC%9B%B9-%EA%B0%9C%EB%B0%9C/java/"},{"name":"코로나 격리 운동","slug":"코로나-격리-운동","link":"/categories/%EC%BD%94%EB%A1%9C%EB%82%98-%EA%B2%A9%EB%A6%AC-%EC%9A%B4%EB%8F%99/"},{"name":"피아노","slug":"코로나-격리-운동/피아노","link":"/categories/%EC%BD%94%EB%A1%9C%EB%82%98-%EA%B2%A9%EB%A6%AC-%EC%9A%B4%EB%8F%99/%ED%94%BC%EC%95%84%EB%85%B8/"},{"name":"java 기초","slug":"웹-개발/java-기초","link":"/categories/%EC%9B%B9-%EA%B0%9C%EB%B0%9C/java-%EA%B8%B0%EC%B4%88/"}]}